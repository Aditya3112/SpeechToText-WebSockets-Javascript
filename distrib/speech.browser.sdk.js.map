{"version":3,"sources":["src/common/GuidGenerator.ts","src/common/PlatformEvent.ts","src/common/AudioSourceEvents.ts","src/common/Error.ts","src/common/Promise.ts","src/common/ConnectionMessage.ts","src/common/ConnectionEvents.ts","src/common/ConnectionOpenResponse.ts","src/common/EventSource.ts","src/common/Events.ts","src/common/List.ts","src/common/Queue.ts","src/common/Stream.ts","src/common/IConnection.ts","src/common/InMemoryStorage.ts","src/common/RawWebsocketMessage.ts","src/common/RiffPcmEncoder.ts","src/common/Storage.ts","src/common.browser/ConsoleLoggingListener.ts","src/common.browser/LocalStorage.ts","src/common.browser/MicAudioSource.ts","src/common.browser/OpusRecorder.ts","src/common.browser/PCMRecorder.ts","src/common.browser/SessionStorage.ts","src/common.browser/Timer.ts","src/common.browser/WebsocketMessageAdapter.ts","src/common.browser/WebsocketConnection.ts","src/sdk/speech/IAuthentication.ts","src/sdk/speech/CognitiveSubscriptionKeyAuthentication.ts","src/sdk/speech/CognitiveTokenAuthentication.ts","src/sdk/speech/ConnectionMessage.ts","src/sdk/speech/SpeechConfig.ts","src/sdk/speech/RecognizerConfig.ts","src/sdk/speech/SpeechResults.ts","src/sdk/speech/RecognitionEvents.ts","src/sdk/speech/ServiceTelemetryListener.ts","src/sdk/speech/Recognizer.ts","src/sdk/speech/WebsocketMessageFormatter.ts","src/sdk/speech.browser/Bootstrapper.ts","src/sdk/speech.browser/SpeechConnectionFactory.ts","src/sdk/speech.browser/Recognizer.ts"],"names":[],"mappings":"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","file":"speech.browser.sdk.js","sourcesContent":["namespace Common {\r\n\r\n    export class GuidGenerator {\r\n        public static Create = (): string => {\r\n            let d = new Date().getTime();\r\n            const guid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c: string) => {\r\n                const r = (d + Math.random() * 16) % 16 | 0;\r\n                d = Math.floor(d / 16);\r\n                return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\r\n            });\r\n\r\n            return guid;\r\n        }\r\n\r\n        public static CreateGuidWithNoDash = (): string => {\r\n            return GuidGenerator.Create().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"GuidGenerator.ts\"/>\r\n/// <reference path=\"IDictionary.ts\"/>\r\n\r\nnamespace Common {\r\n\r\n    export enum EventType {\r\n        Debug,\r\n        Info,\r\n        Warning,\r\n        Error,\r\n    }\r\n\r\n    export class PlatformEvent {\r\n        private eventId: string;\r\n        private eventTime: string;\r\n        private eventType: EventType;\r\n        private metadata: IStringDictionary<string>;\r\n\r\n        constructor(eventType: EventType) {\r\n            this.eventId = GuidGenerator.CreateGuidWithNoDash();\r\n            this.eventTime = new Date().toISOString();\r\n            this.eventType = eventType;\r\n            this.metadata = { };\r\n        }\r\n\r\n        public get EventId(): string {\r\n            return this.eventId;\r\n        }\r\n\r\n        public get EventTime(): string {\r\n            return this.eventTime;\r\n        }\r\n\r\n        public get EventType(): EventType {\r\n            return this.eventType;\r\n        }\r\n\r\n        public get Metadata(): IStringDictionary<string> {\r\n            return this.metadata;\r\n        }\r\n    }\r\n}\r\n","///<reference path=\"..\\common\\PlatformEvent.ts\"/>\r\n\r\nnamespace Common {\r\n\r\n    export class AudioSourceEvent extends PlatformEvent {\r\n        private audioSourceId: string;\r\n\r\n        constructor(audioSourceId: string, eventType: EventType = EventType.Info) {\r\n            super(eventType);\r\n            this.audioSourceId = audioSourceId;\r\n        }\r\n\r\n        public get AudioSourceId(): string {\r\n            return this.audioSourceId;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n        constructor(audioSourceId: string) {\r\n            super(audioSourceId);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class AudioSourceReadyEvent extends AudioSourceEvent {\r\n        constructor(audioSourceId: string) {\r\n            super(audioSourceId);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class AudioSourceOffEvent extends AudioSourceEvent {\r\n        constructor(audioSourceId: string) {\r\n            super(audioSourceId);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class AudioSourceErrorEvent extends AudioSourceEvent {\r\n        private error: string;\r\n        constructor(audioSourceId: string, error: string) {\r\n            super(audioSourceId, EventType.Error);\r\n            this.error = error;\r\n        }\r\n\r\n        public get Error(): string {\r\n            return this.error;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class AudioStreamNodeEvent extends AudioSourceEvent {\r\n        private audioNodeId: string;\r\n\r\n        constructor(audioSourceId: string, audioNodeId: string) {\r\n            super(audioSourceId);\r\n            this.audioNodeId = audioNodeId;\r\n        }\r\n\r\n        public get AudioNodeId(): string {\r\n            return this.audioNodeId;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n        constructor(audioSourceId: string, audioNodeId: string) {\r\n            super(audioSourceId, audioNodeId);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n        constructor(audioSourceId: string, audioNodeId: string) {\r\n            super(audioSourceId, audioNodeId);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n        constructor(audioSourceId: string, audioNodeId: string) {\r\n            super(audioSourceId, audioNodeId);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n        private error: string;\r\n\r\n        constructor(audioSourceId: string, audioNodeId: string, error: string) {\r\n            super(audioSourceId, audioNodeId);\r\n            this.error = error;\r\n        }\r\n\r\n        public get Error(): string {\r\n            return this.error;\r\n        }\r\n    }\r\n}\r\n","namespace Common {\r\n\r\n    /**\r\n     * The error that is thrown when an argument passed in is null.\r\n     *\r\n     * @export\r\n     * @class ArgumentNullError\r\n     * @extends {Error}\r\n     */\r\n    export class ArgumentNullError extends Error {\r\n\r\n        /**\r\n         * Creates an instance of ArgumentNullError.\r\n         *\r\n         * @param {string} argumentName Name of the argument that is null\r\n         *\r\n         * @memberOf ArgumentNullError\r\n         */\r\n        public constructor(argumentName: string) {\r\n            super(argumentName);\r\n            this.name = \"ArgumentNull\";\r\n            this.message = argumentName;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The error that is thrown when an invalid operation is performed in the code.\r\n     *\r\n     * @export\r\n     * @class InvalidOperationError\r\n     * @extends {Error}\r\n     */\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class InvalidOperationError extends Error {\r\n\r\n        /**\r\n         * Creates an instance of InvalidOperationError.\r\n         *\r\n         * @param {string} error The error\r\n         *\r\n         * @memberOf InvalidOperationError\r\n         */\r\n        public constructor(error: string) {\r\n            super(error);\r\n            this.name = \"InvalidOperation\";\r\n            this.message = error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The error that is thrown when an object is disposed.\r\n     *\r\n     * @export\r\n     * @class ObjectDisposedError\r\n     * @extends {Error}\r\n     */\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class ObjectDisposedError extends Error {\r\n\r\n        /**\r\n         * Creates an instance of ObjectDisposedError.\r\n         *\r\n         * @param {string} objectName The object that is disposed\r\n         * @param {string} error The error\r\n         *\r\n         * @memberOf ObjectDisposedError\r\n         */\r\n        public constructor(objectName: string, error?: string) {\r\n            super(error);\r\n            this.name = objectName + \"ObjectDisposed\";\r\n            this.message = error;\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"Error.ts\" />\r\n\r\nnamespace Common {\r\n\r\n    export enum PromiseState {\r\n        None,\r\n        Resolved,\r\n        Rejected,\r\n    }\r\n\r\n    export interface IPromise<T> {\r\n        Result(): PromiseResult<T>;\r\n\r\n        ContinueWith<TContinuationResult>(\r\n            continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n        ContinueWithPromise<TContinuationResult>(\r\n            continuationCallback: (promiseResult: PromiseResult<T>) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n        OnSuccessContinueWith<TContinuationResult>(\r\n            continuationCallback: (result: T) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n        OnSuccessContinueWithPromise<TContinuationResult>(\r\n            continuationCallback: (result: T) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n        On(successCallback: (result: T) => void, errorCallback: (error: string) => void): IPromise<T>;\r\n\r\n        Finally(callback: () => void): IPromise<T>;\r\n    }\r\n\r\n    export interface IDeferred<T> {\r\n        State(): PromiseState;\r\n\r\n        Promise(): IPromise<T>;\r\n\r\n        Resolve(result: T): IDeferred<T>;\r\n\r\n        Reject(error: string): IDeferred<T>;\r\n    }\r\n\r\n    export class PromiseResult<T> {\r\n        protected isCompleted: boolean;\r\n        protected isError: boolean;\r\n        protected error: string;\r\n        protected result: T;\r\n\r\n        public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n            promiseResultEventSource.On((result: T) => {\r\n                if (!this.isCompleted) {\r\n                    this.isCompleted = true;\r\n                    this.isError = false;\r\n                    this.result = result;\r\n                }\r\n            }, (error: string) => {\r\n                if (!this.isCompleted) {\r\n                    this.isCompleted = true;\r\n                    this.isError = true;\r\n                    this.error = error;\r\n                }\r\n            });\r\n        }\r\n\r\n        public get IsCompleted(): boolean {\r\n            return this.isCompleted;\r\n        }\r\n\r\n        public get IsError(): boolean {\r\n            return this.isError;\r\n        }\r\n\r\n        public get Error(): string {\r\n            return this.error;\r\n        }\r\n\r\n        public get Result(): T {\r\n            return this.result;\r\n        }\r\n\r\n        public ThrowIfError = (): void => {\r\n            if (this.IsError) {\r\n                throw this.Error;\r\n            }\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class PromiseResultEventSource<T>  {\r\n\r\n        private onSetResult: (result: T) => void;\r\n        private onSetError: (error: string) => void;\r\n\r\n        public SetResult = (result: T): void => {\r\n            this.onSetResult(result);\r\n        }\r\n\r\n        public SetError = (error: string): void => {\r\n            this.onSetError(error);\r\n        }\r\n\r\n        public On = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n            this.onSetResult = onSetResult;\r\n            this.onSetError = onSetError;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class PromiseHelper {\r\n        public static WhenAll = (promises: Array<Promise<any>>): Promise<boolean> => {\r\n            if (!promises || promises.length === 0) {\r\n                throw new ArgumentNullError(\"promises\");\r\n            }\r\n\r\n            const deferred = new Deferred<boolean>();\r\n            const errors: string[] = [];\r\n            let completedPromises: number = 0;\r\n\r\n            const checkForCompletion = () => {\r\n                completedPromises++;\r\n                if (completedPromises === promises.length) {\r\n                    if (errors.length === 0) {\r\n                        deferred.Resolve(true);\r\n                    } else {\r\n                        deferred.Reject(errors.join(\", \"));\r\n                    }\r\n                }\r\n            };\r\n\r\n            for (const promise of promises) {\r\n                promise.On((r: any) => {\r\n                    checkForCompletion();\r\n                }, (e: string) => {\r\n                    errors.push(e);\r\n                    checkForCompletion();\r\n                });\r\n            }\r\n\r\n            return deferred.Promise();\r\n        }\r\n\r\n        public static FromResult = <TResult>(result: TResult): Promise<TResult> => {\r\n            const deferred = new Deferred<TResult>();\r\n            deferred.Resolve(result);\r\n            return deferred.Promise();\r\n        }\r\n\r\n        public static FromError = <TResult>(error: string): Promise<TResult> => {\r\n            const deferred = new Deferred<TResult>();\r\n            deferred.Reject(error);\r\n            return deferred.Promise();\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class Promise<T> implements IPromise<T> {\r\n\r\n        private sink: Sink<T>;\r\n\r\n        public constructor(sink: Sink<T>) {\r\n            this.sink = sink;\r\n        }\r\n\r\n        public Result = (): PromiseResult<T> => {\r\n            return this.sink.Result;\r\n        }\r\n\r\n        public ContinueWith = <TContinuationResult>(\r\n            continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n            if (!continuationCallback) {\r\n                throw new ArgumentNullError(\"continuationCallback\");\r\n            }\r\n\r\n            const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n            this.sink.on(\r\n                (r: T) => {\r\n                    try {\r\n                        const coninuationResult: TContinuationResult = continuationCallback(this.sink.Result);\r\n                        continuationDeferral.Resolve(coninuationResult);\r\n                    } catch (e) {\r\n                        continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\r\n                    }\r\n                },\r\n                (error: string) => {\r\n                    try {\r\n                        const coninuationResult: TContinuationResult = continuationCallback(this.sink.Result);\r\n                        continuationDeferral.Resolve(coninuationResult);\r\n                    } catch (e) {\r\n                        continuationDeferral.Reject(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n                    }\r\n                },\r\n            );\r\n\r\n            return continuationDeferral.Promise();\r\n        }\r\n\r\n        public OnSuccessContinueWith = <TContinuationResult>(\r\n            continuationCallback: (result: T) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n            if (!continuationCallback) {\r\n                throw new ArgumentNullError(\"continuationCallback\");\r\n            }\r\n\r\n            const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n            this.sink.on(\r\n                (r: T) => {\r\n                    try {\r\n                        const coninuationResult: TContinuationResult = continuationCallback(r);\r\n                        continuationDeferral.Resolve(coninuationResult);\r\n                    } catch (e) {\r\n                        continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\r\n                    }\r\n                },\r\n                (error: string) => {\r\n                    continuationDeferral.Reject(`'Unhandled callback error: ${error}'`);\r\n                },\r\n            );\r\n\r\n            return continuationDeferral.Promise();\r\n        }\r\n\r\n        public ContinueWithPromise = <TContinuationResult>(\r\n            continuationCallback: (promiseResult: PromiseResult<T>) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n            if (!continuationCallback) {\r\n                throw new ArgumentNullError(\"continuationCallback\");\r\n            }\r\n\r\n            const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n            this.sink.on(\r\n                (r: T) => {\r\n                    try {\r\n                        const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.sink.Result);\r\n                        if (!continuationPromise) {\r\n                            throw new Error(\"'Contuniation callback did not return promise'\");\r\n                        }\r\n                        continuationPromise.On((coninuationResult: TContinuationResult) => {\r\n                            continuationDeferral.Resolve(coninuationResult);\r\n                        }, (e: string) => {\r\n                            continuationDeferral.Reject(e);\r\n                        });\r\n                    } catch (e) {\r\n                        continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\r\n                    }\r\n                },\r\n                (error: string) => {\r\n                    try {\r\n                        const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.sink.Result);\r\n                        if (!continuationPromise) {\r\n                            throw new Error(\"Contuniation callback did not return promise\");\r\n                        }\r\n                        continuationPromise.On((coninuationResult: TContinuationResult) => {\r\n                            continuationDeferral.Resolve(coninuationResult);\r\n                        }, (e: string) => {\r\n                            continuationDeferral.Reject(e);\r\n                        });\r\n                    } catch (e) {\r\n                        continuationDeferral.Reject(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n                    }\r\n                },\r\n            );\r\n\r\n            return continuationDeferral.Promise();\r\n        }\r\n\r\n        public OnSuccessContinueWithPromise = <TContinuationResult>(\r\n            continuationCallback: (result: T) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n            if (!continuationCallback) {\r\n                throw new ArgumentNullError(\"continuationCallback\");\r\n            }\r\n\r\n            const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n            this.sink.on(\r\n                (r: T) => {\r\n                    try {\r\n                        const continuationPromise: Promise<TContinuationResult> = continuationCallback(r);\r\n                        if (!continuationPromise) {\r\n                            throw new Error(\"Contuniation callback did not return promise\");\r\n                        }\r\n                        continuationPromise.On((coninuationResult: TContinuationResult) => {\r\n                            continuationDeferral.Resolve(coninuationResult);\r\n                        }, (e: string) => {\r\n                            continuationDeferral.Reject(e);\r\n                        });\r\n                    } catch (e) {\r\n                        continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\r\n                    }\r\n                },\r\n                (error: string) => {\r\n                    continuationDeferral.Reject(`'Unhandled callback error: ${error}.'`);\r\n                },\r\n            );\r\n\r\n            return continuationDeferral.Promise();\r\n        }\r\n\r\n        public On = (\r\n            successCallback: (result: T) => void,\r\n            errorCallback: (error: string) => void): Promise<T> => {\r\n            if (!successCallback) {\r\n                throw new ArgumentNullError(\"successCallback\");\r\n            }\r\n\r\n            if (!errorCallback) {\r\n                throw new ArgumentNullError(\"errorCallback\");\r\n            }\r\n\r\n            this.sink.on(successCallback, errorCallback);\r\n            return this;\r\n        }\r\n\r\n        public Finally = (callback: () => void): Promise<T> => {\r\n            if (!callback) {\r\n                throw new ArgumentNullError(\"callback\");\r\n            }\r\n\r\n            const callbackWrapper = (_: any) => {\r\n                callback();\r\n            };\r\n\r\n            return this.On(callbackWrapper, callbackWrapper);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class Deferred<T> implements IDeferred<T> {\r\n\r\n        private promise: Promise<T>;\r\n        private sink: Sink<T>;\r\n\r\n        public constructor() {\r\n            this.sink = new Sink<T>();\r\n            this.promise = new Promise<T>(this.sink);\r\n        }\r\n\r\n        public State = (): PromiseState => {\r\n            return this.sink.State;\r\n        }\r\n\r\n        public Promise = (): Promise<T> => {\r\n            return this.promise;\r\n        }\r\n\r\n        public Resolve = (result: T): Deferred<T> => {\r\n            this.sink.Resolve(result);\r\n            return this;\r\n        }\r\n\r\n        public Reject = (error: string): Deferred<T> => {\r\n            this.sink.Reject(error);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class Sink<T> {\r\n\r\n        private state: PromiseState = PromiseState.None;\r\n        private promiseResult: PromiseResult<T> = null;\r\n        private promiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n        private successHandlers: Array<((result: T) => void)> = [];\r\n        private errorHandlers: Array<(e: string) => void> = [];\r\n\r\n        public constructor() {\r\n            this.promiseResultEvents = new PromiseResultEventSource();\r\n            this.promiseResult = new PromiseResult(this.promiseResultEvents);\r\n        }\r\n\r\n        public get State(): PromiseState {\r\n            return this.state;\r\n        }\r\n\r\n        public get Result(): PromiseResult<T> {\r\n            return this.promiseResult;\r\n        }\r\n\r\n        public Resolve = (result: T): void => {\r\n            if (this.state !== PromiseState.None) {\r\n                throw new Error(\"'Cannot resolve a completed promise'\");\r\n            }\r\n\r\n            this.state = PromiseState.Resolved;\r\n            this.promiseResultEvents.SetResult(result);\r\n\r\n            for (let i = 0; i < this.successHandlers.length; i++) {\r\n                this.ExecuteSuccessCallback(result, this.successHandlers[i], this.errorHandlers[i]);\r\n            }\r\n\r\n            this.DetachHandlers();\r\n        }\r\n\r\n        public Reject = (error: string): void => {\r\n            if (this.state !== PromiseState.None) {\r\n                throw new Error(\"'Cannot reject a completed promise'\");\r\n            }\r\n\r\n            this.state = PromiseState.Rejected;\r\n            this.promiseResultEvents.SetError(error);\r\n\r\n            for (const errorHandler of this.errorHandlers) {\r\n                this.ExecuteErrorCallback(error, errorHandler);\r\n            }\r\n\r\n            this.DetachHandlers();\r\n        }\r\n\r\n        public on = (\r\n            successCallback: (result: T) => void,\r\n            errorCallback: (error: string) => void): void => {\r\n\r\n            if (successCallback == null) {\r\n                successCallback = (r: T) => { return; };\r\n            }\r\n\r\n            if (this.state === PromiseState.None) {\r\n                this.successHandlers.push(successCallback);\r\n                this.errorHandlers.push(errorCallback);\r\n            } else {\r\n                if (this.state === PromiseState.Resolved) {\r\n                    this.ExecuteSuccessCallback(this.promiseResult.Result, successCallback, errorCallback);\r\n                } else if (this.state === PromiseState.Rejected) {\r\n                    this.ExecuteErrorCallback(this.promiseResult.Error, errorCallback);\r\n                }\r\n\r\n                this.DetachHandlers();\r\n            }\r\n        }\r\n\r\n        private ExecuteSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\r\n            try {\r\n                successCallback(result);\r\n            } catch (e) {\r\n                this.ExecuteErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\r\n            }\r\n        }\r\n\r\n        private ExecuteErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\r\n            if (errorCallback) {\r\n                try {\r\n                    errorCallback(error);\r\n                } catch (e) {\r\n                    throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n                }\r\n            } else {\r\n                throw new Error(`'Unhandled error: ${error}'`);\r\n            }\r\n        }\r\n\r\n        private DetachHandlers = (): void => {\r\n            this.errorHandlers = [];\r\n            this.successHandlers = [];\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"Error.ts\" />\r\n/// <reference path=\"IDictionary.ts\" />\r\n/// <reference path=\"Promise.ts\" />\r\n\r\nnamespace Common {\r\n\r\n    export enum MessageType {\r\n        Text,\r\n        Binary,\r\n    }\r\n\r\n    export class ConnectionMessage {\r\n\r\n        private messageType: MessageType;\r\n        private headers: IStringDictionary<string>;\r\n        private body: any = null;\r\n\r\n        private id: string;\r\n\r\n        public constructor(\r\n            messageType: MessageType,\r\n            body: any,\r\n            headers?: IStringDictionary<string>,\r\n            id?: string) {\r\n\r\n            if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n                throw new InvalidOperationError(\"Payload must be a string\");\r\n            }\r\n\r\n            if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n                throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n            }\r\n\r\n            this.messageType = messageType;\r\n            this.body = body;\r\n            this.headers = headers ? headers : {};\r\n            this.id = id ? id : GuidGenerator.CreateGuidWithNoDash();\r\n        }\r\n\r\n        public get MessageType(): MessageType {\r\n            return this.messageType;\r\n        }\r\n\r\n        public get Headers(): any {\r\n            return this.headers;\r\n        }\r\n\r\n        public get Body(): any {\r\n            return this.body;\r\n        }\r\n\r\n        public get TextBody(): string {\r\n            if (this.messageType === MessageType.Binary) {\r\n                throw new InvalidOperationError(\"Not supported for binary message\");\r\n            }\r\n\r\n            return this.body as string;\r\n        }\r\n\r\n        public get BinaryBody(): ArrayBuffer {\r\n            if (this.messageType === MessageType.Text) {\r\n                throw new InvalidOperationError(\"Not supported for text message\");\r\n            }\r\n\r\n            return this.body;\r\n        }\r\n\r\n        public get Id(): string {\r\n            return this.id;\r\n        }\r\n    }\r\n}\r\n","///<reference path=\"PlatformEvent.ts\"/>\r\n///<reference path=\"IDictionary.ts\"/>\r\n///<reference path=\"ConnectionMessage.ts\"/>\r\n\r\nnamespace Common {\r\n\r\n    export class ConnectionEvent extends PlatformEvent {\r\n        private connectionId: string;\r\n\r\n        constructor(connectionId: string, eventType: EventType = EventType.Info) {\r\n            super(eventType);\r\n            this.connectionId = connectionId;\r\n        }\r\n\r\n        public get ConnectionId(): string {\r\n            return this.connectionId;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class ConnectionStartEvent extends ConnectionEvent {\r\n        private uri: string;\r\n        private headers: IStringDictionary<string>;\r\n\r\n        constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n            super(connectionId);\r\n            this.uri = uri;\r\n            this.headers = headers;\r\n        }\r\n\r\n        public get Uri(): string {\r\n            return this.uri;\r\n        }\r\n\r\n        public get Headers(): IStringDictionary<string> {\r\n            return this.headers;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class ConnectionEstablishedEvent extends ConnectionEvent {\r\n        constructor(connectionId: string, metadata?: IStringDictionary<string>) {\r\n            super(connectionId);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class ConnectionClosedEvent extends ConnectionEvent {\r\n        private reason: string;\r\n        private statusCode: number;\r\n\r\n        constructor(connectionId: string, statusCode: number, reason: string) {\r\n            super(connectionId, EventType.Warning);\r\n            this.reason = reason;\r\n            this.statusCode = statusCode;\r\n        }\r\n\r\n        public get Reason(): string {\r\n            return this.reason;\r\n        }\r\n\r\n        public get StatusCode(): number {\r\n            return this.statusCode;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n        private statusCode: number;\r\n        private reason: string;\r\n\r\n        constructor(connectionId: string, statuscode: number, reason: string) {\r\n            super(connectionId, EventType.Error);\r\n            this.statusCode = statuscode;\r\n            this.reason = reason;\r\n        }\r\n\r\n        public get Reason(): string {\r\n            return this.reason;\r\n        }\r\n\r\n        public get StatusCode(): number {\r\n            return this.statusCode;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n        private networkReceivedTime: string;\r\n        private message: ConnectionMessage;\r\n\r\n        constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n            super(connectionId);\r\n            this.networkReceivedTime = networkReceivedTimeISO;\r\n            this.message = message;\r\n        }\r\n\r\n        public get NetworkReceivedTime(): string {\r\n            return this.networkReceivedTime;\r\n        }\r\n\r\n        public get Message(): ConnectionMessage {\r\n            return this.message;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class ConnectionMessageSentEvent extends ConnectionEvent {\r\n        private networkSentTime: string;\r\n        private message: ConnectionMessage;\r\n\r\n        constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n            super(connectionId);\r\n            this.networkSentTime = networkSentTimeISO;\r\n            this.message = message;\r\n        }\r\n\r\n        public get NetworkSentTime(): string {\r\n            return this.networkSentTime;\r\n        }\r\n\r\n        public get Message(): ConnectionMessage {\r\n            return this.message;\r\n        }\r\n    }\r\n}\r\n","\r\nnamespace Common {\r\n\r\n    export class ConnectionOpenResponse {\r\n        private statusCode: number;\r\n        private reason: string;\r\n\r\n        constructor(statusCode: number, reason: string) {\r\n            this.statusCode = statusCode;\r\n            this.reason = reason;\r\n        }\r\n\r\n        public get StatusCode(): number {\r\n            return this.statusCode;\r\n        }\r\n\r\n        public get Reason(): string {\r\n            return this.reason;\r\n        }\r\n    }\r\n}\r\n","///<reference path=\"Error.ts\"/>\r\n///<reference path=\"IDictionary.ts\"/>\r\n///<reference path=\"IDetachable.ts\"/>\r\n///<reference path=\"IEventSource.ts\"/>\r\n///<reference path=\"GuidGenerator.ts\"/>\r\n\r\nnamespace Common {\r\n\r\n    export class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n        private eventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n        private metadata: IStringDictionary<string>;\r\n        private isDisposed: boolean = false;\r\n\r\n        constructor(metadata?: IStringDictionary<string>) {\r\n            this.metadata = metadata;\r\n        }\r\n\r\n        public OnEvent = (event: TEvent): void => {\r\n            if (this.IsDisposed()) {\r\n                throw (new ObjectDisposedError(\"EventSource\"));\r\n            }\r\n\r\n            if (this.Metadata) {\r\n                for (const paramName in this.Metadata) {\r\n                    if (paramName) {\r\n                        if (event.Metadata) {\r\n                            if (!event.Metadata[paramName]) {\r\n                                event.Metadata[paramName] = this.Metadata[paramName];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (const eventId in this.eventListeners) {\r\n                if (eventId && this.eventListeners[eventId]) {\r\n                    this.eventListeners[eventId](event);\r\n                }\r\n            }\r\n        }\r\n\r\n        public Attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\r\n            const id = GuidGenerator.Create();\r\n            this.eventListeners[id] = onEventCallback;\r\n            return {\r\n                Detach: () => {\r\n                    delete this.eventListeners[id];\r\n                },\r\n            };\r\n        }\r\n\r\n        public AttachListener = (listener: IEventListener<TEvent>): IDetachable => {\r\n            return this.Attach(listener.OnEvent);\r\n        }\r\n\r\n        public IsDisposed = (): boolean => {\r\n            return this.isDisposed;\r\n        }\r\n\r\n        public Dispose = (): void => {\r\n            this.eventListeners = null;\r\n            this.isDisposed = true;\r\n        }\r\n\r\n        public get Metadata(): IStringDictionary<string> {\r\n            return this.metadata;\r\n        }\r\n    }\r\n}\r\n","///<reference path=\"Error.ts\"/>\r\n///<reference path=\"IEventSource.ts\"/>\r\n///<reference path=\"EventSource.ts\"/>\r\n///<reference path=\"PlatformEvent.ts\"/>\r\n\r\nnamespace Common {\r\n    export class Events {\r\n        private static instance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n        public static SetEventSource = (eventSource: IEventSource<PlatformEvent>): void => {\r\n            if (!eventSource) {\r\n                throw new ArgumentNullError(\"eventSource\");\r\n            }\r\n\r\n            Events.instance = eventSource;\r\n        }\r\n\r\n        public static get Instance(): IEventSource<PlatformEvent> {\r\n            return Events.instance;\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"Error.ts\" />\r\n/// <reference path=\"IDetachable.ts\" />\r\n/// <reference path=\"IDictionary.ts\" />\r\n/// <reference path=\"IDisposable.ts\" />\r\n/// <reference path=\"Promise.ts\" />\r\n\r\nnamespace Common {\r\n\r\n    export interface IList<TItem> extends IDisposable {\r\n        Get(itemIndex: number): TItem;\r\n        First(): TItem;\r\n        Last(): TItem;\r\n\r\n        Add(item: TItem): void;\r\n        InsertAt(index: number, item: TItem): void;\r\n\r\n        RemoveFirst(): TItem;\r\n        RemoveLast(): TItem;\r\n        RemoveAt(index: number): TItem;\r\n        Remove(index: number, count: number): TItem[];\r\n        Clear(): void;\r\n\r\n        Length(): number;\r\n\r\n        OnAdded(addedCallback: () => void): IDetachable;\r\n        OnRemoved(removedCallback: () => void): IDetachable;\r\n        OnDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n        Join(seperator?: string): string;\r\n\r\n        ToArray(): TItem[];\r\n\r\n        Any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n        All(callback: (item: TItem) => boolean): boolean;\r\n        ForEach(callback: (item: TItem, index: number) => void): void;\r\n        Select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n        Where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n        OrderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n        OrderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n        Clone(): List<TItem>;\r\n        Concat(list: List<TItem>): List<TItem>;\r\n        ConcatArray(array: TItem[]): List<TItem>;\r\n    }\r\n\r\n    export class List<TItem> implements IList<TItem>  {\r\n        private list: TItem[];\r\n        private subscriptionIdCounter: number = 0;\r\n        private addSubscriptions: IStringDictionary<() => void> = {};\r\n        private removeSubscriptions: IStringDictionary<() => void> = {};\r\n        private disposedSubscriptions: IStringDictionary<() => void> = {};\r\n        private disposeReason: string = null;\r\n\r\n        public constructor(list?: TItem[]) {\r\n            this.list = [];\r\n            // copy the list rather than taking as is.\r\n            if (list) {\r\n                for (const item of list) {\r\n                    this.list.push(item);\r\n                }\r\n            }\r\n        }\r\n\r\n        public Get = (itemIndex: number): TItem => {\r\n            this.ThrowIfDisposed();\r\n            return this.list[itemIndex];\r\n        }\r\n\r\n        public First = (): TItem => {\r\n            return this.Get(0);\r\n        }\r\n\r\n        public Last = (): TItem => {\r\n            return this.Get(this.Length() - 1);\r\n        }\r\n\r\n        public Add = (item: TItem): void => {\r\n            this.ThrowIfDisposed();\r\n            this.InsertAt(this.list.length, item);\r\n        }\r\n\r\n        public InsertAt = (index: number, item: TItem): void => {\r\n            this.ThrowIfDisposed();\r\n            if (index === 0) {\r\n                this.list.unshift(item);\r\n            } else if (index === this.list.length) {\r\n                this.list.push(item);\r\n            } else {\r\n                this.list.splice(index, 0, item);\r\n            }\r\n            this.TriggerSubscriptions(this.addSubscriptions);\r\n        }\r\n\r\n        public RemoveFirst = (): TItem => {\r\n            this.ThrowIfDisposed();\r\n            return this.RemoveAt(0);\r\n        }\r\n\r\n        public RemoveLast = (): TItem => {\r\n            this.ThrowIfDisposed();\r\n            return this.RemoveAt(this.Length() - 1);\r\n        }\r\n\r\n        public RemoveAt = (index: number): TItem => {\r\n            this.ThrowIfDisposed();\r\n            return this.Remove(index, 1)[0];\r\n        }\r\n\r\n        public Remove = (index: number, count: number): TItem[] => {\r\n            this.ThrowIfDisposed();\r\n            const removedElements = this.list.splice(index, count);\r\n            this.TriggerSubscriptions(this.removeSubscriptions);\r\n            return removedElements;\r\n        }\r\n\r\n        public Clear = (): void => {\r\n            this.ThrowIfDisposed();\r\n            this.Remove(0, this.Length());\r\n        }\r\n\r\n        public Length = (): number => {\r\n            this.ThrowIfDisposed();\r\n            return this.list.length;\r\n        }\r\n\r\n        public OnAdded = (addedCallback: () => void): IDetachable => {\r\n            this.ThrowIfDisposed();\r\n            const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n            this.addSubscriptions[subscriptionId] = addedCallback;\r\n\r\n            return {\r\n                Detach: () => {\r\n                    delete this.addSubscriptions[subscriptionId];\r\n                },\r\n            };\r\n        }\r\n\r\n        public OnRemoved = (removedCallback: () => void): IDetachable => {\r\n            this.ThrowIfDisposed();\r\n            const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n            this.removeSubscriptions[subscriptionId] = removedCallback;\r\n\r\n            return {\r\n                Detach: () => {\r\n                    delete this.removeSubscriptions[subscriptionId];\r\n                },\r\n            };\r\n        }\r\n\r\n        public OnDisposed = (disposedCallback: () => void): IDetachable => {\r\n            this.ThrowIfDisposed();\r\n            const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n            this.disposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n            return {\r\n                Detach: () => {\r\n                    delete this.disposedSubscriptions[subscriptionId];\r\n                },\r\n            };\r\n        }\r\n\r\n        public Join = (seperator?: string): string => {\r\n            this.ThrowIfDisposed();\r\n            return this.list.join(seperator);\r\n        }\r\n\r\n        public ToArray = (): TItem[] => {\r\n            const cloneCopy = Array<TItem>();\r\n            this.list.forEach((val: TItem) => {\r\n                cloneCopy.push(val);\r\n            });\r\n            return cloneCopy;\r\n        }\r\n\r\n        public Any = (callback?: (item: TItem, index: number) => boolean): boolean => {\r\n            this.ThrowIfDisposed();\r\n            if (callback) {\r\n                return this.Where(callback).Length() > 0;\r\n            } else {\r\n                return this.Length() > 0;\r\n            }\r\n        }\r\n\r\n        public All = (callback: (item: TItem) => boolean): boolean => {\r\n            this.ThrowIfDisposed();\r\n            return this.Where(callback).Length() === this.Length();\r\n        }\r\n\r\n        public ForEach = (callback: (item: TItem, index: number) => void): void => {\r\n            this.ThrowIfDisposed();\r\n            for (let i = 0; i < this.Length(); i++) {\r\n                callback(this.list[i], i);\r\n            }\r\n        }\r\n\r\n        public Select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\r\n            this.ThrowIfDisposed();\r\n            const selectList: T2[] = [];\r\n            for (let i = 0; i < this.list.length; i++) {\r\n                selectList.push(callback(this.list[i], i));\r\n            }\r\n\r\n            return new List<T2>(selectList);\r\n        }\r\n\r\n        public Where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\r\n            this.ThrowIfDisposed();\r\n            const filteredList = new List<TItem>();\r\n            for (let i = 0; i < this.list.length; i++) {\r\n                if (callback(this.list[i], i)) {\r\n                    filteredList.Add(this.list[i]);\r\n                }\r\n            }\r\n            return filteredList;\r\n        }\r\n\r\n        public OrderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n            this.ThrowIfDisposed();\r\n            const clonedArray = this.ToArray();\r\n            const orderedArray = clonedArray.sort(compareFn);\r\n            return new List(orderedArray);\r\n        }\r\n\r\n        public OrderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n            this.ThrowIfDisposed();\r\n            return this.OrderBy((a: TItem, b: TItem) => compareFn(b, a));\r\n        }\r\n\r\n        public Clone = (): List<TItem> => {\r\n            this.ThrowIfDisposed();\r\n            return new List<TItem>(this.ToArray());\r\n        }\r\n\r\n        public Concat = (list: List<TItem>): List<TItem> => {\r\n            this.ThrowIfDisposed();\r\n            return new List<TItem>(this.list.concat(list.ToArray()));\r\n        }\r\n\r\n        public ConcatArray = (array: TItem[]): List<TItem> => {\r\n            this.ThrowIfDisposed();\r\n            return new List<TItem>(this.list.concat(array));\r\n        }\r\n\r\n        public IsDisposed = (): boolean => {\r\n            return this.list == null;\r\n        }\r\n\r\n        public Dispose = (reason?: string): void => {\r\n            if (!this.IsDisposed()) {\r\n                this.disposeReason = reason;\r\n                this.list = null;\r\n                this.addSubscriptions = null;\r\n                this.removeSubscriptions = null;\r\n                this.TriggerSubscriptions(this.disposedSubscriptions);\r\n            }\r\n        }\r\n\r\n        private ThrowIfDisposed = (): void => {\r\n            if (this.IsDisposed()) {\r\n                throw new ObjectDisposedError(\"List\", this.disposeReason);\r\n            }\r\n        }\r\n\r\n        private TriggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\r\n            if (subscriptions) {\r\n                for (const subscriptionId in subscriptions) {\r\n                    if (subscriptionId) {\r\n                        subscriptions[subscriptionId]();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"Error.ts\" />\r\n/// <reference path=\"IDictionary.ts\" />\r\n/// <reference path=\"IDisposable.ts\" />\r\n/// <reference path=\"Promise.ts\" />\r\n/// <reference path=\"List.ts\" />\r\n\r\nnamespace Common {\r\n\r\n    export interface IQueue<TItem> extends IDisposable {\r\n        Enqueue(item: TItem): void;\r\n        EnqueueFromPromise(promise: Promise<TItem>): void;\r\n        Dequeue(): Promise<TItem>;\r\n        Peek(): Promise<TItem>;\r\n        Length(): number;\r\n    }\r\n\r\n    enum SubscriberType {\r\n        Dequeue,\r\n        Peek,\r\n    }\r\n\r\n    export class Queue<TItem> implements IQueue<TItem> {\r\n        private promiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n        private list: List<TItem>;\r\n        private detachables: IDetachable[];\r\n        private subscribers: List<{ type: SubscriberType, deferral: Deferred<TItem> }>;\r\n        private isDrainInProgress: boolean = false;\r\n        private isDisposing: boolean = false;\r\n        private disposeReason: string = null;\r\n\r\n        public constructor(list?: List<TItem>) {\r\n            this.list = list ? list : new List<TItem>();\r\n            this.detachables = [];\r\n            this.subscribers = new List<{ type: SubscriberType, deferral: Deferred<TItem> }>();\r\n            this.detachables.push(this.list.OnAdded(this.Drain));\r\n        }\r\n\r\n        public Enqueue = (item: TItem): void => {\r\n            this.ThrowIfDispose();\r\n            this.EnqueueFromPromise(PromiseHelper.FromResult(item));\r\n        }\r\n\r\n        public EnqueueFromPromise = (promise: Promise<TItem>): void => {\r\n            this.ThrowIfDispose();\r\n            this.promiseStore.Add(promise);\r\n            promise.Finally(() => {\r\n                while (this.promiseStore.Length() > 0) {\r\n                    if (!this.promiseStore.First().Result().IsCompleted) {\r\n                        break;\r\n                    } else {\r\n                        const p = this.promiseStore.RemoveFirst();\r\n                        if (!p.Result().IsError) {\r\n                            this.list.Add(p.Result().Result);\r\n                        } else {\r\n                            // TODO: Log as warning.\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        public Dequeue = (): Promise<TItem> => {\r\n            this.ThrowIfDispose();\r\n            const deferredSubscriber = new Deferred<TItem>();\r\n            this.subscribers.Add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.Drain();\r\n            return deferredSubscriber.Promise();\r\n        }\r\n\r\n        public Peek = (): Promise<TItem> => {\r\n            this.ThrowIfDispose();\r\n            const deferredSubscriber = new Deferred<TItem>();\r\n            this.subscribers.Add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.Drain();\r\n            return deferredSubscriber.Promise();\r\n        }\r\n\r\n        public Length = (): number => {\r\n            this.ThrowIfDispose();\r\n            return this.list.Length();\r\n        }\r\n\r\n        public IsDisposed = (): boolean => {\r\n            return this.subscribers == null;\r\n        }\r\n\r\n        public DrainAndDispose = (pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<boolean> => {\r\n            if (!this.IsDisposed() && !this.isDisposing) {\r\n                this.disposeReason = reason;\r\n                this.isDisposing = true;\r\n                while (this.subscribers.Length() > 0) {\r\n                    const subscriber = this.subscribers.RemoveFirst();\r\n                    subscriber.deferral.Reject(\"Disposed\");\r\n                }\r\n\r\n                for (const detachable of this.detachables) {\r\n                    detachable.Detach();\r\n                }\r\n\r\n                if (this.promiseStore.Length() > 0 && pendingItemProcessor) {\r\n                    return PromiseHelper\r\n                        .WhenAll(this.promiseStore.ToArray())\r\n                        .ContinueWith(() => {\r\n                            this.subscribers = null;\r\n                            this.list.ForEach((item: TItem, index: number): void => {\r\n                                pendingItemProcessor(item);\r\n                            });\r\n                            this.list = null;\r\n                            return true;\r\n                        });\r\n                } else {\r\n                    this.subscribers = null;\r\n                    this.list = null;\r\n                }\r\n            }\r\n\r\n            return PromiseHelper.FromResult(true);\r\n        }\r\n\r\n        public Dispose = (reason?: string): void => {\r\n            this.DrainAndDispose(null, reason);\r\n        }\r\n\r\n        private Drain = (): void => {\r\n            if (!this.isDrainInProgress && !this.isDisposing) {\r\n                this.isDrainInProgress = true;\r\n\r\n                while (this.list.Length() > 0 && this.subscribers.Length() > 0 && !this.isDisposing) {\r\n                    const subscriber = this.subscribers.RemoveFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.Resolve(this.list.First());\r\n                    } else {\r\n                        const dequeuedItem = this.list.RemoveFirst();\r\n                        subscriber.deferral.Resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                this.isDrainInProgress = false;\r\n            }\r\n        }\r\n\r\n        private ThrowIfDispose = (): void => {\r\n            if (this.IsDisposed()) {\r\n                if (this.disposeReason) {\r\n                    throw new InvalidOperationError(this.disposeReason);\r\n                }\r\n\r\n                throw new ObjectDisposedError(\"Queue\");\r\n            } else if (this.isDisposing) {\r\n                throw new InvalidOperationError(\"Queue disposing\");\r\n            }\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"Promise.ts\" />\r\n/// <reference path=\"List.ts\" />\r\n/// <reference path=\"Queue.ts\" />\r\n\r\nnamespace Common {\r\n\r\n    export interface IStreamChunk<TBuffer> {\r\n        IsEnd: boolean;\r\n        Buffer: TBuffer;\r\n    }\r\n\r\n    export class Stream<TBuffer> {\r\n        private id: string;\r\n        private readerIdCounter: number = 1;\r\n        private streambuffer: Array<IStreamChunk<TBuffer>>;\r\n        private isEnded: boolean = false;\r\n        private readerQueues: IStringDictionary<Queue<IStreamChunk<TBuffer>>>;\r\n\r\n        public constructor(streamId?: string) {\r\n            this.id = streamId ? streamId : GuidGenerator.CreateGuidWithNoDash();\r\n            this.streambuffer = [];\r\n            this.readerQueues = {};\r\n        }\r\n\r\n        public get IsClosed(): boolean {\r\n            return this.isEnded;\r\n        }\r\n\r\n        public get Id(): string {\r\n            return this.id;\r\n        }\r\n\r\n        public Write = (buffer: TBuffer): void => {\r\n            this.ThrowIfClosed();\r\n            this.WriteStreamChunk({\r\n                Buffer: buffer,\r\n                IsEnd: false,\r\n            });\r\n        }\r\n\r\n        public GetReader = (): StreamReader<TBuffer> => {\r\n            const readerId = this.readerIdCounter;\r\n            this.readerIdCounter++;\r\n            const readerQueue = new Queue<IStreamChunk<TBuffer>>();\r\n            const currentLength = this.streambuffer.length;\r\n            this.readerQueues[readerId] = readerQueue;\r\n            for (let i = 0; i < currentLength; i++) {\r\n                readerQueue.Enqueue(this.streambuffer[i]);\r\n            }\r\n            return new StreamReader(\r\n                this.id,\r\n                readerQueue,\r\n                () => {\r\n                    delete this.readerQueues[readerId];\r\n                });\r\n        }\r\n\r\n        public Close = (): void => {\r\n            if (!this.isEnded) {\r\n                this.WriteStreamChunk({\r\n                    Buffer: null,\r\n                    IsEnd: true,\r\n                });\r\n                this.isEnded = true;\r\n            }\r\n        }\r\n\r\n        private WriteStreamChunk = (streamChunk: IStreamChunk<TBuffer>): void => {\r\n            this.ThrowIfClosed();\r\n            this.streambuffer.push(streamChunk);\r\n            for (const readerId in this.readerQueues) {\r\n                if (!this.readerQueues[readerId].IsDisposed()) {\r\n                    try {\r\n                        this.readerQueues[readerId].Enqueue(streamChunk);\r\n                    } catch (e) {\r\n                        // Do nothing\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private ThrowIfClosed = (): void => {\r\n            if (this.isEnded) {\r\n                throw new InvalidOperationError(\"Stream closed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class StreamReader<TBuffer> {\r\n        private readerQueue: Queue<IStreamChunk<TBuffer>>;\r\n        private onClose: () => void;\r\n        private isClosed: boolean = false;\r\n        private streamId: string;\r\n\r\n        public constructor(streamId: string, readerQueue: Queue<IStreamChunk<TBuffer>>, onClose: () => void) {\r\n            this.readerQueue = readerQueue;\r\n            this.onClose = onClose;\r\n            this.streamId = streamId;\r\n        }\r\n\r\n        public get IsClosed(): boolean {\r\n            return this.isClosed;\r\n        }\r\n\r\n        public get StreamId(): string {\r\n            return this.streamId;\r\n        }\r\n\r\n        public Read = (): Promise<IStreamChunk<TBuffer>> => {\r\n            if (this.IsClosed) {\r\n                throw new InvalidOperationError(\"StreamReader closed\");\r\n            }\r\n\r\n            return this.readerQueue\r\n                .Dequeue()\r\n                .OnSuccessContinueWith((streamChunk: IStreamChunk<TBuffer>) => {\r\n                    if (streamChunk.IsEnd) {\r\n                        this.readerQueue.Dispose(\"End of stream reached\");\r\n                    }\r\n\r\n                    return streamChunk;\r\n                });\r\n        }\r\n\r\n        public Close = (): void => {\r\n            if (!this.isClosed) {\r\n                this.isClosed = true;\r\n                this.readerQueue.Dispose(\"StreamReader closed\");\r\n                this.onClose();\r\n            }\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"IDisposable.ts\" />\r\n/// <reference path=\"Promise.ts\" />\r\n/// <reference path=\"EventSource.ts\" />\r\n/// <reference path=\"ConnectionMessage.ts\" />\r\n/// <reference path=\"ConnectionOpenResponse.ts\" />\r\n/// <reference path=\"ConnectionEvents.ts\" />\r\n\r\nnamespace Common {\r\n\r\n    export enum ConnectionState {\r\n        None,\r\n        Connected,\r\n        Connecting,\r\n        Disconnected,\r\n    }\r\n\r\n    export interface IConnection extends IDisposable {\r\n        Id: string;\r\n        State(): ConnectionState;\r\n        Open(): Promise<ConnectionOpenResponse>;\r\n        Send(message: ConnectionMessage): Promise<boolean>;\r\n        Read(): Promise<ConnectionMessage>;\r\n        Events: EventSource<ConnectionEvent>;\r\n    }\r\n}\r\n","/// <reference path=\"IKeyValueStorage.ts\" />\r\n/// <reference path=\"IDictionary.ts\" />\r\n\r\nnamespace Common {\r\n    export class InMemoryStorage implements IKeyValueStorage {\r\n\r\n        private store: IStringDictionary<string> = {};\r\n\r\n        public Get = (key: string): string => {\r\n            if (!key) {\r\n                throw new ArgumentNullError(\"key\");\r\n            }\r\n\r\n            return this.store[key];\r\n        }\r\n\r\n        public GetOrAdd = (key: string, valueToAdd: string): string => {\r\n            if (!key) {\r\n                throw new ArgumentNullError(\"key\");\r\n            }\r\n\r\n            if (this.store[key] === undefined) {\r\n                this.store[key] = valueToAdd;\r\n            }\r\n\r\n            return this.store[key];\r\n        }\r\n\r\n        public Set = (key: string, value: string): void => {\r\n            if (!key) {\r\n                throw new ArgumentNullError(\"key\");\r\n            }\r\n\r\n            this.store[key] = value;\r\n        }\r\n\r\n        public Remove = (key: string): void => {\r\n            if (!key) {\r\n                throw new ArgumentNullError(\"key\");\r\n            }\r\n\r\n            if (this.store[key] !== undefined) {\r\n                delete this.store[key];\r\n            }\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"Error.ts\" />\r\n/// <reference path=\"Promise.ts\" />\r\n/// <reference path=\"ConnectionMessage.ts\" />\r\n\r\nnamespace Common {\r\n\r\n    export class RawWebsocketMessage {\r\n\r\n        private messageType: MessageType;\r\n        private payload: any = null;\r\n        private id: string;\r\n\r\n        public constructor(messageType: MessageType, payload: any, id?: string) {\r\n            if (!payload) {\r\n                throw new ArgumentNullError(\"payload\");\r\n            }\r\n\r\n            if (messageType === MessageType.Binary && !(payload instanceof ArrayBuffer)) {\r\n                throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n            }\r\n\r\n            if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n                throw new InvalidOperationError(\"Payload must be a string\");\r\n            }\r\n\r\n            this.messageType = messageType;\r\n            this.payload = payload;\r\n            this.id = id ? id : GuidGenerator.CreateGuidWithNoDash();\r\n        }\r\n\r\n        public get MessageType(): MessageType {\r\n            return this.messageType;\r\n        }\r\n\r\n        public get Payload(): any {\r\n            return this.payload;\r\n        }\r\n\r\n        public get TextContent(): string {\r\n            if (this.messageType === MessageType.Binary) {\r\n                throw new InvalidOperationError(\"Not supported for binary message\");\r\n            }\r\n\r\n            return this.payload as string;\r\n        }\r\n\r\n        public get BinaryContent(): ArrayBuffer {\r\n            if (this.messageType === MessageType.Text) {\r\n                throw new InvalidOperationError(\"Not supported for text message\");\r\n            }\r\n\r\n            return this.payload;\r\n        }\r\n\r\n        public get Id(): string {\r\n            return this.id;\r\n        }\r\n    }\r\n}\r\n","\r\nnamespace Common {\r\n    export class RiffPcmEncoder {\r\n\r\n        private actualSampleRate: number;\r\n        private desiredSampleRate: number;\r\n        private channelCount: number = 1;\r\n\r\n        public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n            this.actualSampleRate = actualSampleRate;\r\n            this.desiredSampleRate = desiredSampleRate;\r\n        }\r\n\r\n        public Encode = (\r\n            isFirstAudioFrame: boolean,\r\n            actualAudioFrame: Float32Array): ArrayBuffer => {\r\n\r\n            const audioFrame = this.DownSampleAudioFrame(actualAudioFrame, this.actualSampleRate, this.desiredSampleRate);\r\n            const audioLength = audioFrame.length * 2;\r\n\r\n            if (!isFirstAudioFrame) {\r\n                const buffer = new ArrayBuffer(audioLength);\r\n                const view = new DataView(buffer);\r\n                this.FloatTo16BitPCM(view, 0, audioFrame);\r\n\r\n                return buffer;\r\n            }\r\n\r\n            const buffer = new ArrayBuffer(44 + audioLength);\r\n\r\n            const bitsPerSample = 16;\r\n            const bytesPerSample = bitsPerSample / 8;\r\n            // We dont know ahead of time about the length of audio to stream. So set to 0.\r\n            const fileLength = 0;\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n            const view = new DataView(buffer);\r\n\r\n            /* RIFF identifier */\r\n            this.SetString(view, 0, \"RIFF\");\r\n            /* file length */\r\n            view.setUint32(4, fileLength, true);\r\n            /* RIFF type & Format */\r\n            this.SetString(view, 8, \"WAVEfmt \");\r\n            /* format chunk length */\r\n            view.setUint32(16, 16, true);\r\n            /* sample format (raw) */\r\n            view.setUint16(20, 1, true);\r\n            /* channel count */\r\n            view.setUint16(22, this.channelCount, true);\r\n            /* sample rate */\r\n            view.setUint32(24, this.desiredSampleRate, true);\r\n            /* byte rate (sample rate * block align) */\r\n            view.setUint32(28, this.desiredSampleRate * this.channelCount * bytesPerSample, true);\r\n            /* block align (channel count * bytes per sample) */\r\n            view.setUint16(32, this.channelCount * bytesPerSample, true);\r\n            /* bits per sample */\r\n            view.setUint16(34, bitsPerSample, true);\r\n            /* data chunk identifier */\r\n            this.SetString(view, 36, \"data\");\r\n            /* data chunk length */\r\n            view.setUint32(40, fileLength, true);\r\n\r\n            this.FloatTo16BitPCM(view, 44, audioFrame);\r\n\r\n            return buffer;\r\n        }\r\n\r\n        private SetString = (view: DataView, offset: number, str: string): void => {\r\n            for (let i = 0; i < str.length; i++) {\r\n                view.setUint8(offset + i, str.charCodeAt(i));\r\n            }\r\n        }\r\n\r\n        private FloatTo16BitPCM = (view: DataView, offset: number, input: Float32Array): void => {\r\n            for (let i = 0; i < input.length; i++ , offset += 2) {\r\n                const s = Math.max(-1, Math.min(1, input[i]));\r\n                view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n            }\r\n        }\r\n\r\n        private DownSampleAudioFrame = (\r\n            audioFrame: Float32Array,\r\n            actualSampleRate: number,\r\n            desiredSamplerate: number): Float32Array => {\r\n\r\n            if (desiredSamplerate === actualSampleRate || desiredSamplerate > actualSampleRate) {\r\n                return audioFrame;\r\n            }\r\n\r\n            const sampleRateRatio = actualSampleRate / desiredSamplerate;\r\n            const newLength = Math.round(audioFrame.length / sampleRateRatio);\r\n            const downSampledAudioFrame = new Float32Array(newLength);\r\n            let offsetResult = 0;\r\n            let offsetBuffer = 0;\r\n            while (offsetResult < downSampledAudioFrame.length) {\r\n                const nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\r\n                let accum = 0;\r\n                let count = 0;\r\n                for (let i = offsetBuffer; i < nextOffsetBuffer && i < audioFrame.length; i++) {\r\n                    accum += audioFrame[i];\r\n                    count++;\r\n                }\r\n                downSampledAudioFrame[offsetResult] = accum / count;\r\n                offsetResult++;\r\n                offsetBuffer = nextOffsetBuffer;\r\n            }\r\n\r\n            return downSampledAudioFrame;\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"IKeyValueStorage.ts\" />\r\n/// <reference path=\"Error.ts\" />\r\n/// <reference path=\"InMemoryStorage.ts\" />\r\n\r\nnamespace Common {\r\n\r\n    export class Storage {\r\n        private static sessionStorage: IKeyValueStorage = new InMemoryStorage();\r\n        private static localStorage: IKeyValueStorage = new InMemoryStorage();\r\n\r\n        public static SetSessionStorage = (sessionStorage: IKeyValueStorage): void => {\r\n            if (!sessionStorage) {\r\n                throw new ArgumentNullError(\"sessionStorage\");\r\n            }\r\n\r\n            Storage.sessionStorage = sessionStorage;\r\n        }\r\n\r\n        public static SetLocalStorage = (localStorage: IKeyValueStorage): void => {\r\n            if (!localStorage) {\r\n                throw new ArgumentNullError(\"localStorage\");\r\n            }\r\n\r\n            Storage.localStorage = localStorage;\r\n        }\r\n\r\n        public static get Session(): IKeyValueStorage {\r\n            return Storage.sessionStorage;\r\n        }\r\n\r\n        public static get Local(): IKeyValueStorage {\r\n            return Storage.localStorage;\r\n        }\r\n    }\r\n}\r\n","///<reference path=\"../Common/IEventSource.ts\"/>\r\n///<reference path=\"../Common/PlatformEvent.ts\"/>\r\n\r\nnamespace Common.Browser {\r\n\r\n    export class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n        private logLevelFilter: EventType;\r\n\r\n        public constructor(logLevelFilter: EventType = EventType.Warning) {\r\n            this.logLevelFilter = logLevelFilter;\r\n        }\r\n\r\n        public OnEvent = (event: PlatformEvent): void => {\r\n            if (event.EventType >= this.logLevelFilter) {\r\n                const log = this.ToString(event);\r\n\r\n                switch (event.EventType) {\r\n                    case EventType.Debug:\r\n                        // tslint:disable-next-line:no-console\r\n                        console.debug(log);\r\n                        break;\r\n                    case EventType.Info:\r\n                        // tslint:disable-next-line:no-console\r\n                        console.info(log);\r\n                        break;\r\n                    case EventType.Warning:\r\n                        console.warn(log);\r\n                        break;\r\n                    case EventType.Error:\r\n                        console.error(log);\r\n                        break;\r\n                    default:\r\n                        // tslint:disable-next-line:no-console\r\n                        console.log(log);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        private ToString = (event: PlatformEvent): string => {\r\n            const logFragments = [\r\n                `${event.EventTime}`,\r\n            ];\r\n\r\n            if (event.constructor && event.constructor.name) {\r\n                logFragments.push(`${event.constructor.name}`);\r\n            }\r\n\r\n            for (const prop in event) {\r\n                if (prop && prop !== \"EventTime\" && prop !== \"EventType\" && prop !== \"EventId\" && prop !== \"constructor\") {\r\n                    const value = event[prop];\r\n                    let valueToLog = \"<NULL>\";\r\n                    if (value !== undefined && value !== null) {\r\n                        if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                            valueToLog = value.toString();\r\n                        } else {\r\n                            valueToLog = JSON.stringify(value);\r\n                        }\r\n                    }\r\n\r\n                    logFragments.push(`${prop}: ${valueToLog}`);\r\n                }\r\n\r\n            }\r\n\r\n            return logFragments.join(\" | \");\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../common/Error.ts\" />\r\n/// <reference path=\"../common/IKeyValueStorage.ts\" />\r\n\r\nnamespace Common.Browser {\r\n    export class LocalStorage implements IKeyValueStorage {\r\n\r\n        public Get = (key: string): string => {\r\n            if (!key) {\r\n                throw new ArgumentNullError(\"key\");\r\n            }\r\n\r\n            return localStorage.getItem(key);\r\n        }\r\n\r\n        public GetOrAdd = (key: string, valueToAdd: string): string => {\r\n            if (!key) {\r\n                throw new ArgumentNullError(\"key\");\r\n            }\r\n\r\n            const value = localStorage.getItem(key);\r\n            if (value === null || value === undefined) {\r\n                localStorage.setItem(key, valueToAdd);\r\n            }\r\n\r\n            return localStorage.getItem(key);\r\n        }\r\n\r\n        public Set = (key: string, value: string): void => {\r\n            if (!key) {\r\n                throw new ArgumentNullError(\"key\");\r\n            }\r\n\r\n            localStorage.setItem(key, value);\r\n        }\r\n\r\n        public Remove = (key: string): void => {\r\n            if (!key) {\r\n                throw new ArgumentNullError(\"key\");\r\n            }\r\n\r\n            localStorage.removeItem(key);\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"..\\common\\Promise.ts\" />\r\n/// <reference path=\"..\\common\\RiffPcmEncoder.ts\" />\r\n/// <reference path=\"..\\common\\Stream.ts\" />\r\n/// <reference path=\"..\\common\\Events.ts\" />\r\n/// <reference path=\"..\\common\\IAudioSource.ts\" />\r\n/// <reference path=\"..\\common\\EventSource.ts\"/>\r\n/// <reference path=\"..\\common\\PlatformEvent.ts\"/>\r\n/// <reference path=\"..\\common\\AudioSourceEvents.ts\"/>\r\n/// <reference path=\"..\\common\\GuidGenerator.ts\"/>\r\n/// <reference path=\"IRecorder.ts\" />\r\n\r\nnamespace Common.Browser {\r\n\r\n    export class MicAudioSource implements IAudioSource {\r\n\r\n        private streams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n        private id: string;\r\n\r\n        private events: EventSource<PlatformEvent>;\r\n\r\n        private initializeDeferral: Deferred<boolean>;\r\n\r\n        private recorder: IRecorder;\r\n\r\n        private mediaStream: MediaStream;\r\n\r\n        public constructor(recorder: IRecorder, audioSourceId?: string) {\r\n            this.id = audioSourceId ? audioSourceId : GuidGenerator.CreateGuidWithNoDash();\r\n            this.events = new EventSource();\r\n            this.recorder = recorder;\r\n        }\r\n\r\n        public TurnOn = (): Promise<boolean> => {\r\n            if (this.initializeDeferral) {\r\n                return this.initializeDeferral.Promise();\r\n            }\r\n\r\n            this.initializeDeferral = new Deferred<boolean>();\r\n            window.navigator.getUserMedia = (\r\n                navigator.getUserMedia ||\r\n                // tslint:disable-next-line:no-string-literal\r\n                navigator[\"webkitGetUserMedia\"] ||\r\n                // tslint:disable-next-line:no-string-literal\r\n                navigator[\"mozGetUserMedia\"] ||\r\n                // tslint:disable-next-line:no-string-literal\r\n                navigator[\"msGetUserMedia\"]\r\n            );\r\n\r\n            if (!window.navigator.getUserMedia) {\r\n                const errorMsg = \"Browser doesnot support getUserMedia.\";\r\n                this.initializeDeferral.Reject(errorMsg);\r\n                this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n            } else {\r\n                this.OnEvent(new AudioSourceInitializingEvent(this.id)); // no stream id\r\n                window.navigator.getUserMedia(\r\n                    { audio: true },\r\n                    (mediaStream: MediaStream) => {\r\n                        this.mediaStream = mediaStream;\r\n                        this.OnEvent(new AudioSourceReadyEvent(this.id));\r\n                        this.initializeDeferral.Resolve(true);\r\n\r\n                    }, (error: MediaStreamError) => {\r\n                        const errorMsg = `Error occured processing the user media stream. ${error}`;\r\n                        this.initializeDeferral.Reject(errorMsg);\r\n                        this.OnEvent(new AudioSourceErrorEvent(this.id, errorMsg));\r\n                    });\r\n            }\r\n\r\n            return this.initializeDeferral.Promise();\r\n        }\r\n\r\n        public Id = (): string => {\r\n            return this.id;\r\n        }\r\n\r\n        public Attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n            this.OnEvent(new AudioStreamNodeAttachingEvent(this.id, audioNodeId));\r\n\r\n            return this.Listen(audioNodeId).OnSuccessContinueWith<IAudioStreamNode>(\r\n                (streamReader: StreamReader<ArrayBuffer>) => {\r\n                    this.OnEvent(new AudioStreamNodeAttachedEvent(this.id, audioNodeId));\r\n                    return {\r\n                        Detach: () => {\r\n                            streamReader.Close();\r\n                            delete this.streams[audioNodeId];\r\n                            this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n                            this.TurnOff();\r\n                        },\r\n                        Id: () =>  {\r\n                            return audioNodeId;\r\n                        },\r\n                        Read: () => {\r\n                            return streamReader.Read();\r\n                        },\r\n                    };\r\n                });\r\n        }\r\n\r\n        public Detach = (audioNodeId: string): void => {\r\n            if (audioNodeId && this.streams[audioNodeId]) {\r\n                this.streams[audioNodeId].Close();\r\n                delete this.streams[audioNodeId];\r\n                this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n            }\r\n        }\r\n\r\n        public TurnOff = (): Promise<boolean> => {\r\n            for (const streamId in this.streams) {\r\n                if (streamId) {\r\n                    const stream = this.streams[streamId];\r\n                    if (stream) {\r\n                        stream.Close();\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.recorder.ReleaseMediaResources();\r\n\r\n            this.OnEvent(new AudioSourceOffEvent(this.id)); // no stream now\r\n            this.initializeDeferral = null;\r\n            return PromiseHelper.FromResult(true);\r\n        }\r\n\r\n        public get Events(): EventSource<AudioSourceEvent> {\r\n            return this.events;\r\n        }\r\n\r\n        private Listen = (audioNodeId: string): Promise<StreamReader<ArrayBuffer>> => {\r\n            return this.TurnOn()\r\n                .OnSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\r\n                    const stream = new Stream<ArrayBuffer>(audioNodeId);\r\n                    this.streams[audioNodeId] = stream;\r\n\r\n                    try {\r\n                        this.recorder.Record(this.mediaStream, stream);\r\n                    } catch (error) {\r\n                        const errorMsg = `Error occured processing the user media stream. ${error}`;\r\n                        this.initializeDeferral.Reject(errorMsg);\r\n                        this.OnEvent(new AudioStreamNodeErrorEvent(this.id, audioNodeId, error));\r\n                    }\r\n\r\n                    return stream.GetReader();\r\n                });\r\n        }\r\n\r\n        private OnEvent = (event: AudioSourceEvent): void => {\r\n            this.events.OnEvent(event);\r\n            Common.Events.Instance.OnEvent(event);\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"..\\common\\Stream.ts\" />\r\n/// <reference path=\"IRecorder.ts\" />\r\n\r\nnamespace Common.Browser {\r\n    export class OpusRecorder implements IRecorder {\r\n        private mediaResources: IMediaResources;\r\n        private mediaRecorderOptions: any;\r\n\r\n        constructor(options?: { mimeType: string, bitsPerSecond: number }) {\r\n            this.mediaRecorderOptions = options;\r\n        }\r\n\r\n        public Record = (mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\r\n                   const mediaRecorder: any = new MediaRecorder(mediaStream, this.mediaRecorderOptions);\r\n                   const timeslice = 100; // this is in ms - 100 ensures that the chunk doesn't exceed the max size of chunk allowed in WS connection\r\n                   mediaRecorder.ondataavailable = (dataAvailableEvent: any) => {\r\n                        if (outputStream) {\r\n                            const reader = new FileReader();\r\n                            reader.readAsArrayBuffer(dataAvailableEvent.data);\r\n                            reader.onloadend = (event: ProgressEvent) => {\r\n                                outputStream.Write(reader.result);\r\n                            };\r\n                        }\r\n                    };\r\n\r\n                   this.mediaResources = {\r\n                        recorder: mediaRecorder,\r\n                        stream: mediaStream,\r\n                    };\r\n                   mediaRecorder.start(timeslice);\r\n        }\r\n\r\n        public ReleaseMediaResources = (): void => {\r\n            if (this.mediaResources.recorder.state !== \"inactive\") {\r\n                this.mediaResources.recorder.stop();\r\n            }\r\n            this.mediaResources.stream.getTracks().forEach((track: any) => track.stop());\r\n        }\r\n    }\r\n\r\n    interface IMediaResources {\r\n        stream: MediaStream;\r\n        recorder: MediaRecorder;\r\n    }\r\n}\r\n","/// <reference path=\"..\\common\\Stream.ts\" />\r\n/// <reference path=\"..\\common\\RiffPcmEncoder.ts\" />\r\n\r\nnamespace Common.Browser {\r\n    export class PcmRecorder implements IRecorder {\r\n        private mediaResources: IMediaResources;\r\n        public Record = (mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\r\n            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n            const audioContext = new AudioContext();\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource\r\n            const mediaStreamSource = audioContext.createMediaStreamSource(mediaStream);\r\n\r\n            const desiredSampleRate = 16000;\r\n            // let compressionRatio = mediaStreamSource.context.sampleRate / desiredSampleRate;\r\n            let bufferSize = 2048;\r\n            let isFirstFrameWritten: boolean = false;\r\n            if (desiredSampleRate * 4 <= mediaStreamSource.context.sampleRate) {\r\n                bufferSize = 8192;\r\n            } else if (desiredSampleRate * 2 <= mediaStreamSource.context.sampleRate) {\r\n                bufferSize = 4096;\r\n            }\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor\r\n            const scriptNode = mediaStreamSource.context.createScriptProcessor(bufferSize, 1, 1);\r\n            const waveStreamEncoder = new RiffPcmEncoder(mediaStreamSource.context.sampleRate, desiredSampleRate);\r\n\r\n            scriptNode.onaudioprocess = (audioProcessingEvent: AudioProcessingEvent) => {\r\n                const monoAudioChunk = audioProcessingEvent.inputBuffer.getChannelData(0);\r\n\r\n                let encodedAudioFrameWithRiffHeader: ArrayBuffer;\r\n                let encodedAudioFrame: ArrayBuffer;\r\n                if (outputStream) {\r\n                    if (isFirstFrameWritten) {\r\n                        if (!encodedAudioFrame) {\r\n                            encodedAudioFrame = waveStreamEncoder.Encode(false, monoAudioChunk);\r\n                        }\r\n\r\n                        outputStream.Write(encodedAudioFrame);\r\n                    } else {\r\n                        if (!encodedAudioFrameWithRiffHeader) {\r\n                            encodedAudioFrameWithRiffHeader =\r\n                                waveStreamEncoder.Encode(true, monoAudioChunk);\r\n                        }\r\n\r\n                        outputStream.Write(encodedAudioFrameWithRiffHeader);\r\n                        isFirstFrameWritten = true;\r\n                    }\r\n                }\r\n            };\r\n\r\n            this.mediaResources = {\r\n                context: audioContext,\r\n                scriptProcessorNode: scriptNode,\r\n                source: mediaStreamSource,\r\n                stream: mediaStream,\r\n            };\r\n\r\n            mediaStreamSource.connect(scriptNode);\r\n            scriptNode.connect(mediaStreamSource.context.destination);\r\n        }\r\n\r\n        public ReleaseMediaResources = (): void => {\r\n             if (this.mediaResources.scriptProcessorNode) {\r\n                this.mediaResources.scriptProcessorNode.disconnect();\r\n                this.mediaResources.scriptProcessorNode = null;\r\n             }\r\n             if (this.mediaResources.source) {\r\n                this.mediaResources.source.disconnect();\r\n                this.mediaResources.stream.getTracks().forEach((track: any) => track.stop());\r\n                this.mediaResources.source = null;\r\n             }\r\n             if (this.mediaResources.context.state !== \"closed\") {\r\n                this.mediaResources.context.close();\r\n             }\r\n        }\r\n    }\r\n\r\n    interface IMediaResources {\r\n        context: AudioContext;\r\n        source: MediaStreamAudioSourceNode;\r\n        scriptProcessorNode: ScriptProcessorNode;\r\n        stream: MediaStream;\r\n    }\r\n}\r\n","/// <reference path=\"../common/Error.ts\" />\r\n/// <reference path=\"../common/IKeyValueStorage.ts\" />\r\n/// <reference path=\"../common/IDictionary.ts\" />\r\n\r\nnamespace Common.Browser {\r\n    export class SessionStorage implements IKeyValueStorage {\r\n\r\n        public Get = (key: string): string => {\r\n            if (!key) {\r\n                throw new ArgumentNullError(\"key\");\r\n            }\r\n\r\n            return sessionStorage.getItem(key);\r\n        }\r\n\r\n        public GetOrAdd = (key: string, valueToAdd: string): string => {\r\n            if (!key) {\r\n                throw new ArgumentNullError(\"key\");\r\n            }\r\n\r\n            const value = sessionStorage.getItem(key);\r\n            if (value === null || value === undefined) {\r\n                sessionStorage.setItem(key, valueToAdd);\r\n            }\r\n\r\n            return sessionStorage.getItem(key);\r\n        }\r\n\r\n        public Set = (key: string, value: string): void => {\r\n            if (!key) {\r\n                throw new ArgumentNullError(\"key\");\r\n            }\r\n\r\n            sessionStorage.setItem(key, value);\r\n        }\r\n\r\n        public Remove = (key: string): void => {\r\n            if (!key) {\r\n                throw new ArgumentNullError(\"key\");\r\n            }\r\n\r\n            sessionStorage.removeItem(key);\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../common/ITimer.ts\"/>\r\n\r\nnamespace Common.Browser {\r\n    export class Timer implements ITimer {\r\n        private delayInMillisec: number;\r\n        private timerId: number;\r\n        private successCallback: any;\r\n        constructor(delayInMillisec: number, successCallback: any) {\r\n            this.delayInMillisec = delayInMillisec;\r\n            this.successCallback = successCallback;\r\n        }\r\n        public start = (...params: any[]): void => {\r\n            if (this.timerId) {\r\n                this.stop();\r\n            }\r\n            this.timerId = setTimeout(this.successCallback, this.delayInMillisec, params);\r\n        }\r\n\r\n        public stop = (): void => {\r\n            clearTimeout(this.timerId);\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../common/Error.ts\" />\r\n/// <reference path=\"../common/Promise.ts\" />\r\n/// <reference path=\"../common/Events.ts\" />\r\n/// <reference path=\"../common/Iconnection.ts\" />\r\n/// <reference path=\"../common/IWebsocketMessageFormatter.ts\" />\r\n/// <reference path=\"../common/RawWebsocketMessage.ts\" />\r\n/// <reference path=\"../common/ConnectionMessage.ts\" />\r\n/// <reference path=\"../common/ConnectionOpenResponse.ts\" />\r\n/// <reference path=\"../common/Queue.ts\" />\r\n/// <reference path=\"../common/GuidGenerator.ts\" />\r\n/// <reference path=\"../common/ConnectionEvents.ts\" />\r\n/// <reference path=\"../common/EventSource.ts\" />\r\n\r\nnamespace Common.Browser {\r\n\r\n    interface ISendItem {\r\n        Message: ConnectionMessage;\r\n        RawWebsocketMessage: RawWebsocketMessage;\r\n        SendStatusDeferral: Deferred<boolean>;\r\n    }\r\n\r\n    export class WebsocketMessageAdapter {\r\n\r\n        private connectionState: ConnectionState;\r\n        private messageFormatter: IWebsocketMessageFormatter;\r\n        private websocketClient: WebSocket;\r\n\r\n        private sendMessageQueue: Queue<ISendItem>;\r\n        private receivingMessageQueue: Queue<ConnectionMessage>;\r\n        private connectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n        private disconnectDeferral: Deferred<boolean>;\r\n        private connectionEvents: EventSource<ConnectionEvent>;\r\n        private connectionId: string;\r\n        private uri: string;\r\n\r\n        public constructor(\r\n            uri: string,\r\n            connectionId: string,\r\n            messageFormatter: IWebsocketMessageFormatter) {\r\n\r\n            if (!uri) {\r\n                throw new ArgumentNullError(\"uri\");\r\n            }\r\n\r\n            if (!messageFormatter) {\r\n                throw new ArgumentNullError(\"messageFormatter\");\r\n            }\r\n\r\n            this.connectionEvents = new EventSource<ConnectionEvent>();\r\n            this.connectionId = connectionId;\r\n            this.messageFormatter = messageFormatter;\r\n            this.connectionState = ConnectionState.None;\r\n            this.uri = uri;\r\n        }\r\n\r\n        public get State(): ConnectionState {\r\n            return this.connectionState;\r\n        }\r\n\r\n        public Open = (): Promise<ConnectionOpenResponse> => {\r\n            if (this.connectionState === ConnectionState.Disconnected) {\r\n                return PromiseHelper.FromError<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.connectionState} state`);\r\n            }\r\n\r\n            if (this.connectionEstablishDeferral) {\r\n                return this.connectionEstablishDeferral.Promise();\r\n            }\r\n\r\n            this.connectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n            this.connectionState = ConnectionState.Connecting;\r\n\r\n            this.websocketClient = new WebSocket(this.uri);\r\n            this.receivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.disconnectDeferral = new Deferred<boolean>();\r\n            this.sendMessageQueue = new Queue<ISendItem>();\r\n            this.ProcessSendQueue();\r\n\r\n            this.OnEvent(new ConnectionStartEvent(this.connectionId, this.uri));\r\n\r\n            this.websocketClient.onopen = (e: Event) => {\r\n                this.connectionState = ConnectionState.Connected;\r\n                this.OnEvent(new ConnectionEstablishedEvent(this.connectionId));\r\n                this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(200, \"\"));\r\n            };\r\n\r\n            this.websocketClient.onerror = (e: Event) => {\r\n                // TODO: Understand what this is error is. Will we still get onClose ?\r\n                if (this.connectionState !== ConnectionState.Connecting) {\r\n                    // TODO: Is this required ?\r\n                    // this.OnEvent(new ConnectionErrorEvent(errorMsg, connectionId));\r\n                }\r\n            };\r\n\r\n            this.websocketClient.onclose = (e: CloseEvent) => {\r\n                if (this.connectionState === ConnectionState.Connecting) {\r\n                    this.connectionState = ConnectionState.Disconnected;\r\n                    this.OnEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                    this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(e.code, e.reason));\r\n                } else {\r\n                    this.OnEvent(new ConnectionClosedEvent(this.connectionId, e.code, e.reason));\r\n                }\r\n\r\n                this.OnClose(e.code, e.reason);\r\n            };\r\n\r\n            this.websocketClient.onmessage = (e: MessageEvent) => {\r\n                const networkReceivedTime = new Date().toISOString();\r\n                if (this.connectionState === ConnectionState.Connected) {\r\n                    const deferred = new Deferred<ConnectionMessage>();\r\n                    // let id = ++this.idCounter;\r\n                    this.receivingMessageQueue.EnqueueFromPromise(deferred.Promise());\r\n                    if (e.data instanceof Blob) {\r\n                        const fileReader = new FileReader();\r\n                        fileReader.onload = (le: Event) => {\r\n                            const rawMessage = new RawWebsocketMessage(MessageType.Binary, fileReader.result);\r\n                            this.messageFormatter\r\n                                .ToConnectionMessage(rawMessage)\r\n                                .On((connectionMessage: ConnectionMessage) => {\r\n                                    this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\r\n                                    deferred.Resolve(connectionMessage);\r\n                                }, (error: string) => {\r\n                                    // TODO: Events for these ?\r\n                                    deferred.Reject(`Invalid binary message format. Error: ${error}`);\r\n                                });\r\n                        };\r\n                        fileReader.onerror = (ev: Event) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.Reject(\"Binary message parse error\");\r\n                        };\r\n\r\n                        fileReader.readAsArrayBuffer(e.data);\r\n                    } else {\r\n                        const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                        this.messageFormatter\r\n                            .ToConnectionMessage(rawMessage)\r\n                            .On((connectionMessage: ConnectionMessage) => {\r\n                                this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\r\n                                deferred.Resolve(connectionMessage);\r\n                            }, (error: string) => {\r\n                                // TODO: Events for these ?\r\n                                deferred.Reject(`Invalid text message format. Error: ${error}`);\r\n                            });\r\n                    }\r\n                }\r\n            };\r\n\r\n            return this.connectionEstablishDeferral.Promise();\r\n        }\r\n\r\n        public Send = (message: ConnectionMessage): Promise<boolean> => {\r\n            if (this.connectionState !== ConnectionState.Connected) {\r\n                return PromiseHelper.FromError<boolean>(`Cannot send on connection that is in ${this.connectionState} state`);\r\n            }\r\n\r\n            const messageSendStatusDeferral = new Deferred<boolean>();\r\n            const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n            this.sendMessageQueue.EnqueueFromPromise(messageSendDeferral.Promise());\r\n\r\n            this.messageFormatter\r\n                .FromConnectionMessage(message)\r\n                .On((rawMessage: RawWebsocketMessage) => {\r\n                    messageSendDeferral.Resolve({\r\n                        Message: message,\r\n                        RawWebsocketMessage: rawMessage,\r\n                        SendStatusDeferral: messageSendStatusDeferral,\r\n                    });\r\n                }, (error: string) => {\r\n                    messageSendDeferral.Reject(`Error formatting the message. ${error}`);\r\n                });\r\n\r\n            return messageSendStatusDeferral.Promise();\r\n        }\r\n\r\n        public Read = (): Promise<ConnectionMessage> => {\r\n            if (this.connectionState !== ConnectionState.Connected) {\r\n                return PromiseHelper.FromError<ConnectionMessage>(`Cannot read on connection that is in ${this.connectionState} state`);\r\n            }\r\n\r\n            return this.receivingMessageQueue.Dequeue();\r\n        }\r\n\r\n        public Close = (reason?: string): Promise<boolean> => {\r\n            if (this.websocketClient) {\r\n                if (this.connectionState !== ConnectionState.Connected) {\r\n                    this.websocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n                }\r\n            } else {\r\n                const deferral = new Deferred<boolean>();\r\n                deferral.Resolve(true);\r\n                return deferral.Promise();\r\n            }\r\n\r\n            return this.disconnectDeferral.Promise();\r\n        }\r\n\r\n        public get Events(): EventSource<PlatformEvent> {\r\n            return this.connectionEvents;\r\n        }\r\n\r\n        private SendRawMessage = (sendItem: ISendItem): Promise<boolean> => {\r\n            try {\r\n                this.OnEvent(new ConnectionMessageSentEvent(this.connectionId, new Date().toISOString(), sendItem.Message));\r\n                this.websocketClient.send(sendItem.RawWebsocketMessage.Payload);\r\n                return PromiseHelper.FromResult(true);\r\n            } catch (e) {\r\n                return PromiseHelper.FromError<boolean>(`websocket send error: ${e}`);\r\n            }\r\n        }\r\n\r\n        private OnClose = (code: number, reason: string): void => {\r\n            const closeReason = `Connection closed. ${code}: ${reason}`;\r\n            this.connectionState = ConnectionState.Disconnected;\r\n            this.disconnectDeferral.Resolve(true);\r\n            this.receivingMessageQueue.Dispose(reason);\r\n            this.receivingMessageQueue.DrainAndDispose((pendingReceiveItem: ConnectionMessage) => {\r\n                // TODO: Events for these ?\r\n                // Logger.Instance.OnEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n            }, closeReason);\r\n\r\n            this.sendMessageQueue.DrainAndDispose((pendingSendItem: ISendItem) => {\r\n                pendingSendItem.SendStatusDeferral.Reject(closeReason);\r\n            }, closeReason);\r\n        }\r\n\r\n        private ProcessSendQueue = (): void => {\r\n            this.sendMessageQueue\r\n                .Dequeue()\r\n                .On((sendItem: ISendItem) => {\r\n                    this.SendRawMessage(sendItem)\r\n                        .On((result: boolean) => {\r\n                            sendItem.SendStatusDeferral.Resolve(result);\r\n                            this.ProcessSendQueue();\r\n                        }, (sendError: string) => {\r\n                            sendItem.SendStatusDeferral.Reject(sendError);\r\n                            this.ProcessSendQueue();\r\n                        });\r\n                }, (error: string) => {\r\n                    // do nothing\r\n                });\r\n        }\r\n\r\n        private OnEvent = (event: ConnectionEvent): void => {\r\n            this.connectionEvents.OnEvent(event);\r\n            Events.Instance.OnEvent(event);\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"..\\common\\Error.ts\" />\r\n/// <reference path=\"..\\common\\Promise.ts\" />\r\n/// <reference path=\"..\\common\\IDictionary.ts\" />\r\n/// <reference path=\"..\\common\\IConnection.ts\" />\r\n/// <reference path=\"..\\common\\ConnectionOpenResponse.ts\" />\r\n/// <reference path=\"..\\common\\IWebsocketMessageFormatter.ts\" />\r\n/// <reference path=\"WebsocketMessageAdapter.ts\" />\r\n\r\nnamespace Common.Browser {\r\n\r\n    export class WebsocketConnection implements IConnection {\r\n\r\n        private uri: string;\r\n        private messageFormatter: IWebsocketMessageFormatter;\r\n        private connectionMessageAdapter: WebsocketMessageAdapter;\r\n        private id: string;\r\n        private isDisposed: boolean = false;\r\n\r\n        public constructor(\r\n            uri: string,\r\n            queryParameters: IStringDictionary<string>,\r\n            headers: IStringDictionary<string>,\r\n            messageFormatter: IWebsocketMessageFormatter,\r\n            connectionId?: string) {\r\n\r\n            if (!uri) {\r\n                throw new ArgumentNullError(\"uri\");\r\n            }\r\n\r\n            if (!messageFormatter) {\r\n                throw new ArgumentNullError(\"messageFormatter\");\r\n            }\r\n\r\n            this.messageFormatter = messageFormatter;\r\n\r\n            let queryParams = \"\";\r\n            let i = 0;\r\n\r\n            if (queryParameters) {\r\n                for (const paramName in queryParameters) {\r\n                    if (paramName) {\r\n                        queryParams += i === 0 ? \"?\" : \"&\";\r\n                        const val = encodeURIComponent(queryParameters[paramName]);\r\n                        queryParams += `${paramName}=${val}`;\r\n                        i++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (headers) {\r\n                for (const headerName in headers) {\r\n                    if (headerName) {\r\n                        queryParams += i === 0 ? \"?\" : \"&\";\r\n                        const val = encodeURIComponent(headers[headerName]);\r\n                        queryParams += `${headerName}=${val}`;\r\n                        i++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.uri = uri + queryParams;\r\n            this.id = connectionId ? connectionId : GuidGenerator.CreateGuidWithNoDash();\r\n\r\n            this.connectionMessageAdapter = new WebsocketMessageAdapter(\r\n                this.uri,\r\n                this.Id,\r\n                this.messageFormatter);\r\n        }\r\n\r\n        public Dispose = (): void => {\r\n            this.isDisposed = true;\r\n\r\n            if (this.connectionMessageAdapter) {\r\n                this.connectionMessageAdapter.Close();\r\n            }\r\n        }\r\n\r\n        public IsDisposed = (): boolean => {\r\n            return this.isDisposed;\r\n        }\r\n\r\n        public get Id(): string {\r\n            return this.id;\r\n        }\r\n\r\n        public State = (): ConnectionState => {\r\n            return this.connectionMessageAdapter.State;\r\n        }\r\n\r\n        public Open = (): Promise<ConnectionOpenResponse> => {\r\n            return this.connectionMessageAdapter.Open();\r\n        }\r\n\r\n        public Send = (message: ConnectionMessage): Promise<boolean> => {\r\n            return this.connectionMessageAdapter.Send(message);\r\n        }\r\n\r\n        public Read = (): Promise<ConnectionMessage> => {\r\n            return this.connectionMessageAdapter.Read();\r\n        }\r\n\r\n        public get Events(): EventSource<PlatformEvent> {\r\n            return this.connectionMessageAdapter.Events;\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"..\\..\\common\\Promise.ts\" />\r\n\r\nnamespace Speech {\r\n    import Promise = Common.Promise;\r\n\r\n    export interface IAuthentication {\r\n        Fetch(authFetchEventId: string): Promise<AuthInfo>;\r\n        FetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\r\n    }\r\n\r\n    export class AuthInfo {\r\n        private headerName: string;\r\n        private token: string;\r\n\r\n        public constructor(headerName: string, token: string) {\r\n            this.headerName = headerName;\r\n            this.token = token;\r\n        }\r\n\r\n        public get HeaderName(): string {\r\n            return this.headerName;\r\n        }\r\n\r\n        public get Token(): string {\r\n            return this.token;\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"..\\..\\common\\Error.ts\" />\r\n/// <reference path=\"..\\..\\common\\Promise.ts\" />\r\n/// <reference path=\"IAuthentication.ts\" />\r\n\r\nnamespace Speech {\r\n    import ArgumentNullError = Common.ArgumentNullError;\r\n    import Promise = Common.Promise;\r\n    import PromiseHelper = Common.PromiseHelper;\r\n\r\n    const AuthHeader: string = \"Ocp-Apim-Subscription-Key\";\r\n\r\n    export class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n        private authInfo: AuthInfo;\r\n\r\n        constructor(subscriptionKey: string) {\r\n            if (!subscriptionKey) {\r\n                throw new ArgumentNullError(\"subscriptionKey\");\r\n            }\r\n\r\n            this.authInfo = new AuthInfo(AuthHeader, subscriptionKey);\r\n        }\r\n\r\n        public Fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n            return PromiseHelper.FromResult(this.authInfo);\r\n        }\r\n\r\n        public FetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n            return PromiseHelper.FromResult(this.authInfo);\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"..\\..\\common\\Error.ts\" />\r\n/// <reference path=\"..\\..\\common\\Promise.ts\" />\r\n/// <reference path=\"IAuthentication.ts\" />\r\n\r\nnamespace Speech {\r\n    import ArgumentNullError = Common.ArgumentNullError;\r\n    import Promise = Common.Promise;\r\n\r\n    const AuthHeader: string = \"Authorization\";\r\n\r\n    export class CognitiveTokenAuthentication implements IAuthentication {\r\n        private fetchCallback: (authFetchEventId: string) => Promise<string>;\r\n        private fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n        constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n            if (!fetchCallback) {\r\n                throw new ArgumentNullError(\"fetchCallback\");\r\n            }\r\n\r\n            if (!fetchOnExpiryCallback) {\r\n                throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n            }\r\n\r\n            this.fetchCallback = fetchCallback;\r\n            this.fetchOnExpiryCallback = fetchOnExpiryCallback;\r\n        }\r\n\r\n        public Fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n            return  this.fetchCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\r\n        }\r\n\r\n        public FetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n            return  this.fetchOnExpiryCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"..\\..\\common\\Promise.ts\" />\r\n/// <reference path=\"..\\..\\common\\Error.ts\" />\r\n/// <reference path=\"..\\..\\common\\ConnectionMessage.ts\" />\r\n/// <reference path=\"..\\..\\common\\IDictionary.ts\" />\r\n\r\nnamespace Speech {\r\n\r\n    const PathHeaderName: string = \"path\";\r\n    const ContentTypeHeaderName: string = \"content-type\";\r\n    const RequestIdHeaderName: string = \"x-requestid\";\r\n    const RequestTimestampHeaderName: string = \"x-timestamp\";\r\n\r\n    import ArgumentNullError = Common.ArgumentNullError;\r\n    import IStringDictionary = Common.IStringDictionary;\r\n    import MessageType = Common.MessageType;\r\n\r\n    export class ConnectionMessage extends Common.ConnectionMessage {\r\n\r\n        private path: string;\r\n        private requestId: string;\r\n        private contentType: string;\r\n        private additionalHeaders: IStringDictionary<string>;\r\n\r\n        public constructor(\r\n            messageType: MessageType,\r\n            path: string,\r\n            requestId: string,\r\n            contentType: string,\r\n            body: any,\r\n            additionalHeaders?: IStringDictionary<string>,\r\n            id?: string) {\r\n\r\n            if (!path) {\r\n                throw new ArgumentNullError(\"path\");\r\n            }\r\n\r\n            if (!requestId) {\r\n                throw new ArgumentNullError(\"requestId\");\r\n            }\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            headers[PathHeaderName] = path;\r\n            headers[RequestIdHeaderName] = requestId;\r\n            headers[RequestTimestampHeaderName] = new Date().toISOString();\r\n            if (contentType) {\r\n                headers[ContentTypeHeaderName] = contentType;\r\n            }\r\n\r\n            if (additionalHeaders) {\r\n                for (const headerName in additionalHeaders) {\r\n                    if (headerName) {\r\n                        headers[headerName] = additionalHeaders[headerName];\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            if (id) {\r\n                super(messageType, body, headers, id);\r\n            } else {\r\n                super(messageType, body, headers);\r\n            }\r\n\r\n            this.path = path;\r\n            this.requestId = requestId;\r\n            this.contentType = contentType;\r\n            this.additionalHeaders = additionalHeaders;\r\n        }\r\n\r\n        public get Path(): string {\r\n            return this.path;\r\n        }\r\n\r\n        public get RequestId(): string {\r\n            return this.requestId;\r\n        }\r\n\r\n        public get ContentType(): string {\r\n            return this.contentType;\r\n        }\r\n\r\n        public get AdditionalHeaders(): IStringDictionary<string> {\r\n            return this.additionalHeaders;\r\n        }\r\n\r\n        public static FromConnectionMessage = (message: Common.ConnectionMessage): ConnectionMessage => {\r\n            let path = null;\r\n            let requestId = null;\r\n            let contentType = null;\r\n            let requestTimestamp = null;\r\n            const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n            if (message.Headers) {\r\n                for (const headerName in message.Headers) {\r\n                    if (headerName) {\r\n                        if (headerName.toLowerCase() === PathHeaderName.toLowerCase()) {\r\n                            path = message.Headers[headerName];\r\n                        } else if (headerName.toLowerCase() === RequestIdHeaderName.toLowerCase()) {\r\n                            requestId = message.Headers[headerName];\r\n                        } else if (headerName.toLowerCase() === RequestTimestampHeaderName.toLowerCase()) {\r\n                            requestTimestamp = message.Headers[headerName];\r\n                        } else if (headerName.toLowerCase() === ContentTypeHeaderName.toLowerCase()) {\r\n                            contentType = message.Headers[headerName];\r\n                        } else {\r\n                            additionalHeaders[headerName] = message.Headers[headerName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return new ConnectionMessage(\r\n                message.MessageType,\r\n                path,\r\n                requestId,\r\n                contentType,\r\n                message.Body,\r\n                additionalHeaders,\r\n                message.Id);\r\n        }\r\n    }\r\n}\r\n","namespace Speech {\r\n    export class SpeechConfig {\r\n        private context: Context;\r\n\r\n        constructor(context: Context) {\r\n            this.context = context;\r\n        }\r\n\r\n        public Serialize = (): string => {\r\n            return JSON.stringify(this, (key: any, value: any) : any => {\r\n            if (value && typeof value === \"object\") {\r\n                const replacement: any = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n            });\r\n        }\r\n\r\n        public get Context(): Context{\r\n            return this.context;\r\n        }\r\n\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class Context {\r\n        private system: System;\r\n        private os: OS;\r\n        private device: Device;\r\n\r\n        constructor(os: OS, device: Device) {\r\n            this.system = new System();\r\n            this.os = os;\r\n            this.device = device;\r\n        }\r\n\r\n        public get System(): System {\r\n            return this.system;\r\n        }\r\n\r\n        public get OS(): OS {\r\n            return this.os;\r\n        }\r\n\r\n        public get Device(): Device {\r\n            return this.device;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class System {\r\n        private version: string;\r\n        constructor() {\r\n            // TODO: Tie this with the sdk Version somehow\r\n            this.version = \"1.0.00000\";\r\n        }\r\n        public get Version(): string {\r\n            // Controlled by sdk\r\n            return this.version;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class OS {\r\n\r\n        private platform: string;\r\n        private name: string;\r\n        private version: string;\r\n\r\n        constructor(platform: string, name: string, version: string) {\r\n            this.platform = platform;\r\n            this.name = name;\r\n            this.version = version;\r\n        }\r\n\r\n        public get Platform(): string {\r\n            return this.platform;\r\n        }\r\n\r\n        public get Name(): string {\r\n            return this.name;\r\n        }\r\n\r\n        public get Version(): string {\r\n            return this.version;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class Device {\r\n\r\n        private manufacturer: string;\r\n        private model: string;\r\n        private version: string;\r\n\r\n        constructor(manufacturer: string, model: string, version: string) {\r\n            this.manufacturer = manufacturer;\r\n            this.model = model;\r\n            this.version = version;\r\n        }\r\n\r\n        public get Manufacturer(): string {\r\n            return this.manufacturer;\r\n        }\r\n\r\n        public get Model(): string {\r\n            return this.model;\r\n        }\r\n\r\n        public get Version(): string {\r\n            return this.version;\r\n        }\r\n    }\r\n}\r\n","///<reference path=\"..\\speech\\SpeechConfig.ts\"/>\r\n\r\nnamespace Speech {\r\n\r\n    export enum RecognitionMode {\r\n        Interactive,\r\n        Conversation,\r\n        Dictation,\r\n    }\r\n\r\n    export enum SpeechResultFormat {\r\n        Simple,\r\n        Detailed,\r\n    }\r\n\r\n    export class RecognizerConfig {\r\n        private recognitionMode: RecognitionMode = RecognitionMode.Interactive;\r\n        private language: string;\r\n        private format: SpeechResultFormat;\r\n        private speechConfig: SpeechConfig;\r\n        private recognitionActivityTimeout: number;\r\n\r\n        constructor(\r\n            platformConfig: SpeechConfig,\r\n            recognitionMode: RecognitionMode = RecognitionMode.Interactive,\r\n            language: string = \"en-us\",\r\n            format: SpeechResultFormat = SpeechResultFormat.Simple) {\r\n            this.speechConfig = platformConfig ? platformConfig : new SpeechConfig(new Context(null, null));\r\n            this.recognitionMode = recognitionMode;\r\n            this.language = language;\r\n            this.format = format;\r\n            this.recognitionActivityTimeout = recognitionMode === RecognitionMode.Interactive ? 8000 : 25000;\r\n        }\r\n\r\n        public get RecognitionMode(): RecognitionMode {\r\n            return this.recognitionMode;\r\n        }\r\n\r\n        public get Language(): string {\r\n            return this.language;\r\n        }\r\n\r\n        public get Format(): SpeechResultFormat{\r\n            return this.format;\r\n        }\r\n\r\n        public get SpeechConfig(): SpeechConfig {\r\n            return this.speechConfig;\r\n        }\r\n\r\n        public get RecognitionActivityTimeout(): number {\r\n            return this.recognitionActivityTimeout;\r\n        }\r\n\r\n        public get IsContinuousRecognition(): boolean {\r\n            return this.recognitionMode !== RecognitionMode.Interactive;\r\n        }\r\n    }\r\n}\r\n","namespace Speech {\r\n\r\n    export enum RecognitionStatus {\r\n        Success,\r\n        NoMatch,\r\n        InitialSilenceTimeout,\r\n        BabbleTimeout,\r\n        Error,\r\n        EndOfDictation,\r\n    }\r\n\r\n    export interface ISpeechStartDetectedResult {\r\n        Offset?: number;\r\n    }\r\n\r\n    export interface ISpeechHypothesisResult {\r\n        Text: string;\r\n        Offset?: number;\r\n        Duration?: number;\r\n    }\r\n\r\n    export interface ISpeechEndDetectedResult {\r\n        Offset?: number;\r\n    }\r\n\r\n    export interface ISimpleSpeechPhrase {\r\n        RecognitionStatus: RecognitionStatus;\r\n        DisplayText: string;\r\n        Duration?: number;\r\n        Offset?: number;\r\n    }\r\n\r\n    export interface IDetailedSpeechPhrase {\r\n        RecognitionStatus: RecognitionStatus;\r\n        NBest: IPhrase[];\r\n        Duration?: number;\r\n        Offset?: number;\r\n    }\r\n\r\n    export interface IPhrase {\r\n        Confidence?: number;\r\n        Lexical: string;\r\n        ITN: string;\r\n        MaskedITN: string;\r\n        Display: string;\r\n    }\r\n}\r\n","/// <reference path=\"../../common/Events.ts\" />\r\n/// <reference path=\"../../common/PlatformEvent.ts\" />\r\n/// <reference path=\"SpeechResults.ts\"/>\r\n\r\nnamespace Speech {\r\n\r\n    import PlatformEvent = Common.PlatformEvent;\r\n    import EventType = Common.EventType;\r\n\r\n    export class SpeechRecognitionEvent extends PlatformEvent {\r\n        private eventName: string;\r\n        private requestId: string;\r\n\r\n        constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\r\n            super(eventType);\r\n\r\n            this.eventName = eventName;\r\n            this.requestId = requestId;\r\n        }\r\n\r\n        public get Name(): string {\r\n            return this.eventName;\r\n        }\r\n\r\n        public get RequestId(): string {\r\n            return this.requestId;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class SpeechRecognitionResultEvent<TResult> extends SpeechRecognitionEvent {\r\n        private result: TResult;\r\n\r\n        constructor(eventName: string, requestId: string, result: TResult) {\r\n            super(eventName, requestId);\r\n            this.result = result;\r\n        }\r\n\r\n        public get Result(): TResult {\r\n            return this.result;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n        private audioSourceId: string;\r\n        private audioNodeId: string;\r\n\r\n        constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n            super(\"RecognitionTriggeredEvent\", requestId);\r\n\r\n            this.audioSourceId = audioSourceId;\r\n            this.audioNodeId = audioNodeId;\r\n        }\r\n\r\n        public get AudioSourceId(): string {\r\n            return this.audioSourceId;\r\n        }\r\n\r\n        public get AudioNodeId(): string {\r\n            return this.audioNodeId;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n        private audioSourceId: string;\r\n        private audioNodeId: string;\r\n\r\n        constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n            super(\"ListeningStartedEvent\", requestId);\r\n            this.audioSourceId = audioSourceId;\r\n            this.audioNodeId = audioNodeId;\r\n        }\r\n\r\n        public get AudioSourceId(): string {\r\n            return this.audioSourceId;\r\n        }\r\n\r\n        public get AudioNodeId(): string {\r\n            return this.audioNodeId;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n        private authFetchEventid: string;\r\n        private connectionId: string;\r\n\r\n        constructor(requestId: string, authFetchEventid: string, connectionId: string) {\r\n            super(\"ConnectingToServiceEvent\", requestId);\r\n            this.authFetchEventid = authFetchEventid;\r\n            this.connectionId = connectionId;\r\n        }\r\n\r\n        public get AuthFetchEventid(): string {\r\n            return this.authFetchEventid;\r\n        }\r\n\r\n        public get ConnectionId(): string {\r\n            return this.connectionId;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n        private audioSourceId: string;\r\n        private audioNodeId: string;\r\n        private authFetchEventId: string;\r\n        private connectionId: string;\r\n\r\n        constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, connectionId: string) {\r\n            super(\"RecognitionStartedEvent\", requestId);\r\n\r\n            this.audioSourceId = audioSourceId;\r\n            this.audioNodeId = audioNodeId;\r\n            this.authFetchEventId = authFetchEventId;\r\n            this.connectionId = connectionId;\r\n        }\r\n\r\n        public get AudioSourceId(): string {\r\n            return this.audioSourceId;\r\n        }\r\n\r\n        public get AudioNodeId(): string {\r\n            return this.audioNodeId;\r\n        }\r\n\r\n        public get AuthFetchEventId(): string {\r\n            return this.authFetchEventId;\r\n        }\r\n\r\n        public get ConnectionId(): string {\r\n            return this.connectionId;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class SpeechStartDetectedEvent extends SpeechRecognitionResultEvent<ISpeechStartDetectedResult> {\r\n        constructor(requestId: string, result: ISpeechStartDetectedResult) {\r\n            super(\"SpeechStartDetectedEvent\", requestId, result);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class SpeechHypothesisEvent extends SpeechRecognitionResultEvent<ISpeechHypothesisResult> {\r\n        constructor(requestId: string, result: ISpeechHypothesisResult) {\r\n            super(\"SpeechHypothesisEvent\", requestId, result);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class SpeechEndDetectedEvent extends SpeechRecognitionResultEvent<ISpeechEndDetectedResult> {\r\n        constructor(requestId: string, result: ISpeechEndDetectedResult) {\r\n            super(\"SpeechEndDetectedEvent\", requestId, result);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class SpeechSimplePhraseEvent extends SpeechRecognitionResultEvent<ISimpleSpeechPhrase> {\r\n        constructor(requestId: string, result: ISimpleSpeechPhrase) {\r\n            super(\"SpeechSimplePhraseEvent\", requestId, result);\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class SpeechDetailedPhraseEvent extends SpeechRecognitionResultEvent<IDetailedSpeechPhrase> {\r\n        constructor(requestId: string, result: IDetailedSpeechPhrase) {\r\n            super(\"SpeechDetailedPhraseEvent\", requestId, result);\r\n        }\r\n    }\r\n\r\n    export enum RecognitionCompletionStatus {\r\n        Success,\r\n        AudioSourceError,\r\n        AudioSourceTimeout,\r\n        AuthTokenFetchError,\r\n        AuthTokenFetchTimeout,\r\n        UnAuthorized,\r\n        ConnectTimeout,\r\n        ConnectError,\r\n        ClientRecognitionActivityTimeout,\r\n        UnknownError,\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class RecognitionEndedEvent  extends SpeechRecognitionEvent {\r\n        private audioSourceId: string;\r\n        private audioNodeId: string;\r\n        private authFetchEventId: string;\r\n        private connectionId: string;\r\n        private serviceTag: string;\r\n        private status: RecognitionCompletionStatus;\r\n        private error: string;\r\n\r\n        constructor(\r\n            requestId: string,\r\n            audioSourceId: string,\r\n            audioNodeId: string,\r\n            authFetchEventId: string,\r\n            connectionId: string,\r\n            serviceTag: string,\r\n            status: RecognitionCompletionStatus,\r\n            error: string) {\r\n\r\n            super(\"RecognitionEndedEvent\", requestId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n\r\n            this.audioSourceId = audioSourceId;\r\n            this.audioNodeId = audioNodeId;\r\n            this.connectionId = connectionId;\r\n            this.authFetchEventId = authFetchEventId;\r\n\r\n            this.serviceTag = serviceTag;\r\n        }\r\n\r\n        public get AudioSourceId(): string {\r\n            return this.audioSourceId;\r\n        }\r\n\r\n        public get AudioNodeId(): string {\r\n            return this.audioNodeId;\r\n        }\r\n\r\n        public get AuthFetchEventId(): string {\r\n            return this.authFetchEventId;\r\n        }\r\n\r\n        public get ConnectionId(): string {\r\n            return this.connectionId;\r\n        }\r\n\r\n        public get ServiceTag(): string {\r\n            return this.serviceTag;\r\n        }\r\n\r\n        public get Status(): RecognitionCompletionStatus {\r\n            return this.status;\r\n        }\r\n\r\n        public get Error(): string {\r\n            return this.error;\r\n        }\r\n    }\r\n}\r\n","///<reference path=\"../../common/AudioSourceEvents.ts\"/>\r\n///<reference path=\"../../common/ConnectionEvents.ts\"/>\r\n///<reference path=\"../../common/EventSource.ts\"/>\r\n///<reference path=\"../../common/IDictionary.ts\"/>\r\n///<reference path=\"../../common/PlatformEvent.ts\"/>\r\n\r\nnamespace Speech {\r\n\r\n    import IStringDictionary = Common.IStringDictionary;\r\n    import IEventListener = Common.IEventListener;\r\n    import PlatformEvent = Common.PlatformEvent;\r\n\r\n    interface ITelemetry {\r\n        Metrics: IMetric[];\r\n        ReceivedMessages: IStringDictionary<string[]>;\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    interface IMetric {\r\n        End: string;\r\n        Error?: string;\r\n        Id?: string;\r\n        Name: string;\r\n        Start: string;\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    export class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n        private isDisposed: boolean = false;\r\n\r\n        private requestId: string;\r\n        private audioSourceId: string;\r\n        private audioNodeId: string;\r\n\r\n        private listeningTriggerMetric: IMetric = null;\r\n        private micMetric: IMetric = null;\r\n        private connectionEstablishMetric: IMetric = null;\r\n\r\n        private micStartTime: string;\r\n\r\n        private connectionId: string;\r\n        private connectionStartTime: string;\r\n\r\n        private receivedMessages: IStringDictionary<string[]>;\r\n\r\n        constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n            this.requestId = requestId;\r\n            this.audioSourceId = audioSourceId;\r\n            this.audioNodeId = audioNodeId;\r\n\r\n            this.receivedMessages = {};\r\n        }\r\n\r\n        public OnEvent = (e: PlatformEvent): void => {\r\n            if (this.isDisposed) {\r\n                return;\r\n            }\r\n\r\n            if (e instanceof RecognitionTriggeredEvent && e.RequestId === this.requestId) {\r\n                this.listeningTriggerMetric = {\r\n                    End: e.EventTime,\r\n                    Name: \"ListeningTrigger\",\r\n                    Start: e.EventTime,\r\n                };\r\n            }\r\n\r\n            if (e instanceof Common.AudioStreamNodeAttachingEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n                this.micStartTime = e.EventTime;\r\n            }\r\n\r\n            if (e instanceof Common.AudioStreamNodeAttachedEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n                this.micStartTime = e.EventTime;\r\n            }\r\n\r\n            if (e instanceof Common.AudioSourceErrorEvent && e.AudioSourceId === this.audioSourceId) {\r\n                if (!this.micMetric) {\r\n                    this.micMetric = {\r\n                        End: e.EventTime,\r\n                        Error: e.Error,\r\n                        Name: \"Microphone\",\r\n                        Start: this.micStartTime,\r\n                    };\r\n                }\r\n            }\r\n\r\n            if (e instanceof Common.AudioStreamNodeErrorEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n                if (!this.micMetric) {\r\n                    this.micMetric = {\r\n                        End: e.EventTime,\r\n                        Error: e.Error,\r\n                        Name: \"Microphone\",\r\n                        Start: this.micStartTime,\r\n                    };\r\n                }\r\n            }\r\n\r\n            if (e instanceof Common.AudioStreamNodeDetachedEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n                if (!this.micMetric) {\r\n                    this.micMetric = {\r\n                        End: e.EventTime,\r\n                        Name: \"Microphone\",\r\n                        Start: this.micStartTime,\r\n                    };\r\n                }\r\n            }\r\n\r\n            if (e instanceof ConnectingToServiceEvent && e.RequestId === this.requestId) {\r\n                this.connectionId = e.ConnectionId;\r\n            }\r\n\r\n            if (e instanceof Common.ConnectionStartEvent && e.ConnectionId === this.connectionId) {\r\n                this.connectionStartTime = e.EventTime;\r\n            }\r\n\r\n            if (e instanceof Common.ConnectionEstablishedEvent && e.ConnectionId === this.connectionId) {\r\n                if (!this.connectionEstablishMetric) {\r\n                    this.connectionEstablishMetric = {\r\n                        End: e.EventTime,\r\n                        Id: this.connectionId,\r\n                        Name: \"Connection\",\r\n                        Start: this.connectionStartTime,\r\n                    };\r\n                }\r\n            }\r\n\r\n            if (e instanceof Common.ConnectionEstablishErrorEvent && e.ConnectionId === this.connectionId) {\r\n                if (!this.connectionEstablishMetric) {\r\n                    this.connectionEstablishMetric = {\r\n                        End: e.EventTime,\r\n                        Error: this.GetConnectionError(e.StatusCode),\r\n                        Id: this.connectionId,\r\n                        Name: \"Connection\",\r\n                        Start: this.connectionStartTime,\r\n                    };\r\n                }\r\n            }\r\n\r\n            if (e instanceof Common.ConnectionMessageReceivedEvent && e.ConnectionId === this.connectionId) {\r\n                if (e.Message && e.Message.Headers && e.Message.Headers.path) {\r\n                    if (!this.receivedMessages[e.Message.Headers.path]) {\r\n                        this.receivedMessages[e.Message.Headers.path] = new Array<string>();\r\n                    }\r\n\r\n                    this.receivedMessages[e.Message.Headers.path].push(e.NetworkReceivedTime);\r\n                }\r\n            }\r\n        }\r\n\r\n        public GetTelemetry = (): string => {\r\n            const metrics = new Array<IMetric>();\r\n\r\n            if (this.listeningTriggerMetric) {\r\n                metrics.push(this.listeningTriggerMetric);\r\n            }\r\n\r\n            if (this.micMetric) {\r\n                metrics.push(this.micMetric);\r\n            }\r\n\r\n            if (this.connectionEstablishMetric) {\r\n                metrics.push(this.connectionEstablishMetric);\r\n            }\r\n\r\n            const telemetry: ITelemetry = {\r\n                Metrics: metrics,\r\n                ReceivedMessages: this.receivedMessages,\r\n            };\r\n\r\n            const json = JSON.stringify(telemetry);\r\n\r\n            // We dont want to send the same telemetry again. So clean those out.\r\n            this.receivedMessages = {};\r\n            this.listeningTriggerMetric = null;\r\n            this.micMetric = null;\r\n            this.connectionEstablishMetric = null;\r\n\r\n            return json;\r\n        }\r\n\r\n        public Dispose = (): void => {\r\n            this.isDisposed = true;\r\n        }\r\n\r\n        private GetConnectionError = (statusCode: number): string => {\r\n            /*\r\n            -- Websocket status codes --\r\n            NormalClosure = 1000,\r\n            EndpointUnavailable = 1001,\r\n            ProtocolError = 1002,\r\n            InvalidMessageType = 1003,\r\n            Empty = 1005,\r\n            InvalidPayloadData = 1007,\r\n            PolicyViolation = 1008,\r\n            MessageTooBig = 1009,\r\n            MandatoryExtension = 1010,\r\n            InternalServerError = 1011\r\n            */\r\n\r\n            switch (statusCode) {\r\n                case 400:\r\n                case 1002:\r\n                case 1003:\r\n                case 1005:\r\n                case 1007:\r\n                case 1008:\r\n                case 1009: return \"BadRequest\";\r\n                case 401: return \"Unauthorized\";\r\n                case 403: return \"Forbidden\";\r\n                case 503:\r\n                case 1001: return \"ServerUnavailable\";\r\n                case 500:\r\n                case 1011: return \"ServerError\";\r\n                case 408:\r\n                case 504: return \"Timeout\";\r\n                default: return \"statuscode:\" + statusCode.toString();\r\n            }\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../../common/GuidGenerator.ts\" />\r\n/// <reference path=\"../../common/Error.ts\" />\r\n/// <reference path=\"../../common/Promise.ts\" />\r\n/// <reference path=\"../../common/Stream.ts\" />\r\n/// <reference path=\"../../common/IConnection.ts\" />\r\n/// <reference path=\"../../common/ConnectionOpenResponse.ts\" />\r\n/// <reference path=\"IConnectionFactory.ts\" />\r\n/// <reference path=\"../../common/ConnectionMessage.ts\" />\r\n/// <reference path=\"../../common/IDictionary.ts\" />\r\n/// <reference path=\"ConnectionMessage.ts\" />\r\n/// <reference path=\"SpeechResults.ts\" />\r\n/// <reference path=\"RecognizerConfig.ts\" />\r\n/// <reference path=\"RecognitionEvents.ts\" />\r\n/// <reference path=\"../../common/IDictionary.ts\" />\r\n/// <reference path=\"../../common/EventSource.ts\" />\r\n/// <reference path=\"../../common/IAudioSource.ts\" />\r\n/// <reference path=\"ServiceTelemetryListener.ts\"/>\r\n/// <reference path=\"../../common.browser/Timer.ts\"/>\r\n/// <reference path=\"../../common/Events.ts\"/>\r\n\r\nnamespace Speech {\r\n    import GuidGenerator = Common.GuidGenerator;\r\n    import ArgumentNullError = Common.ArgumentNullError;\r\n    import Promise = Common.Promise;\r\n    import Deferred = Common.Deferred;\r\n    import PromiseHelper = Common.PromiseHelper;\r\n    import IConnection = Common.IConnection;\r\n    import MessageType = Common.MessageType;\r\n    import IStreamChunk = Common.IStreamChunk;\r\n    import IAudioSource = Common.IAudioSource;\r\n    import Timer = Common.Browser.Timer;\r\n\r\n    export class Recognizer {\r\n        private authentication: IAuthentication;\r\n        private connectionFactory: IConnectionFactory;\r\n        private audioSource: IAudioSource;\r\n        private recognizerConfig: RecognizerConfig;\r\n        private speechConfigConnectionId: string;\r\n        private connectionFetchPromise: Promise<IConnection>;\r\n        private connectionId: string;\r\n        private authFetchEventId: string;\r\n\r\n        public constructor(\r\n            authentication: IAuthentication,\r\n            connectionFactory: IConnectionFactory,\r\n            audioSource: IAudioSource,\r\n            recognizerConfig: RecognizerConfig) {\r\n\r\n            if (!authentication) {\r\n                throw new ArgumentNullError(\"authentication\");\r\n            }\r\n\r\n            if (!connectionFactory) {\r\n                throw new ArgumentNullError(\"connectionFactory\");\r\n            }\r\n\r\n            if (!audioSource) {\r\n                throw new ArgumentNullError(\"audioSource\");\r\n            }\r\n\r\n            if (!recognizerConfig) {\r\n                throw new ArgumentNullError(\"recognizerConfig\");\r\n            }\r\n\r\n            this.authentication = authentication;\r\n            this.connectionFactory = connectionFactory;\r\n            this.audioSource = audioSource;\r\n            this.recognizerConfig = recognizerConfig;\r\n        }\r\n\r\n        public get AudioSource(): IAudioSource {\r\n            return this.audioSource;\r\n        }\r\n\r\n        public Recognize = (onEventCallback: (event: SpeechRecognitionEvent) => void, speechContextJson?: string): Promise<boolean> => {\r\n            const requestSession = new RequestSession(this.audioSource.Id(), onEventCallback);\r\n            requestSession.ListenForServiceTelemetry(this.audioSource.Events);\r\n\r\n            return this.audioSource\r\n                .Attach(requestSession.AudioNodeId)\r\n                .ContinueWithPromise<boolean>((result: Common.PromiseResult<Common.IAudioStreamNode>) => {\r\n                    if (result.IsError) {\r\n                        requestSession.OnAudioSourceAttachCompleted(null, true, result.Error);\r\n                        throw new Error(result.Error);\r\n                    } else {\r\n                        requestSession.OnAudioSourceAttachCompleted(result.Result, false);\r\n                    }\r\n\r\n                    const audioNode = result.Result;\r\n\r\n                    this.FetchConnection(requestSession)\r\n                        .OnSuccessContinueWith((connection: IConnection) => {\r\n                            const messageRetrievalPromise = this.ReceiveMessage(connection, requestSession);\r\n                            const messageSendPromise = this.SendSpeechConfig(requestSession.RequestId, connection, this.recognizerConfig.SpeechConfig.Serialize())\r\n                                .OnSuccessContinueWithPromise((_: boolean) => {\r\n                                    return this.SendSpeechContext(requestSession.RequestId, connection, speechContextJson)\r\n                                        .OnSuccessContinueWithPromise((_: boolean) => {\r\n                                            return this.SendAudio(requestSession.RequestId, connection, audioNode, requestSession);\r\n                                        });\r\n                                });\r\n\r\n                            const completionPromise = PromiseHelper.WhenAll([messageRetrievalPromise, messageSendPromise]);\r\n\r\n                            completionPromise.On((r: boolean) => {\r\n                                requestSession.Dispose();\r\n                                this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                            }, (error: string) => {\r\n                                requestSession.Dispose(error);\r\n                                this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                            });\r\n\r\n                            return completionPromise;\r\n                        });\r\n\r\n                    return requestSession.CompletionPromise;\r\n                });\r\n        }\r\n\r\n        private FetchConnection = (requestSession: RequestSession, isUnAuthorized: boolean = false): Promise<IConnection> => {\r\n            if (this.connectionFetchPromise) {\r\n                if (this.connectionFetchPromise.Result().IsError\r\n                    || this.connectionFetchPromise.Result().Result.State() === Common.ConnectionState.Disconnected) {\r\n                    this.connectionId = null;\r\n                    this.connectionFetchPromise = null;\r\n                    return this.FetchConnection(requestSession);\r\n                } else {\r\n                    requestSession.OnPreConnectionStart(this.authFetchEventId, this.connectionId);\r\n                    requestSession.OnConnectionEstablishCompleted(200);\r\n                    requestSession.ListenForServiceTelemetry(this.connectionFetchPromise.Result().Result.Events);\r\n                    return this.connectionFetchPromise;\r\n                }\r\n            }\r\n\r\n            this.authFetchEventId = GuidGenerator.CreateGuidWithNoDash();\r\n            this.connectionId = GuidGenerator.CreateGuidWithNoDash();\r\n\r\n            requestSession.OnPreConnectionStart(this.authFetchEventId, this.connectionId);\r\n\r\n            const authPromise = isUnAuthorized ? this.authentication.FetchOnExpiry(this.authFetchEventId) : this.authentication.Fetch(this.authFetchEventId);\r\n\r\n            this.connectionFetchPromise = authPromise\r\n                .ContinueWithPromise((result: Common.PromiseResult<AuthInfo>) => {\r\n                    if (result.IsError) {\r\n                        requestSession.OnAuthCompleted(true, result.Error);\r\n                        throw new Error(result.Error);\r\n                    } else {\r\n                        requestSession.OnAuthCompleted(false);\r\n                    }\r\n\r\n                    const connection = this.connectionFactory.Create(this.recognizerConfig, result.Result, this.connectionId);\r\n                    requestSession.ListenForServiceTelemetry(connection.Events);\r\n\r\n                    return connection.Open().OnSuccessContinueWithPromise((response: Common.ConnectionOpenResponse) => {\r\n                        if (response.StatusCode === 200) {\r\n                            requestSession.OnConnectionEstablishCompleted(response.StatusCode);\r\n                            return PromiseHelper.FromResult(connection);\r\n                        } else if (response.StatusCode === 403 && !isUnAuthorized) {\r\n                            return this.FetchConnection(requestSession, true);\r\n                        } else {\r\n                            requestSession.OnConnectionEstablishCompleted(response.StatusCode, response.Reason);\r\n                            return PromiseHelper.FromError<IConnection>(`Unable to contact server. StatusCode: ${response.StatusCode}, Reason: ${response.Reason}`);\r\n                        }\r\n                    });\r\n                });\r\n\r\n            return this.connectionFetchPromise;\r\n        }\r\n\r\n        private ReceiveMessage = (connection: IConnection, requestSession: RequestSession): Promise<boolean> => {\r\n            return connection\r\n                .Read()\r\n                .OnSuccessContinueWithPromise((message: Common.ConnectionMessage) => {\r\n                    const connectionMessage = ConnectionMessage.FromConnectionMessage(message);\r\n                    if (connectionMessage.RequestId.toLowerCase() === requestSession.RequestId.toLowerCase()) {\r\n                        switch (connectionMessage.Path.toLowerCase()) {\r\n                            case \"turn.start\":\r\n                                requestSession.OnServiceTurnStartResponse(JSON.parse(connectionMessage.TextBody));\r\n                                break;\r\n                            case \"speech.startDetected\":\r\n                                requestSession.OnServiceSpeechStartDetectedResponse(JSON.parse(connectionMessage.TextBody));\r\n                                break;\r\n                            case \"speech.hypothesis\":\r\n                                requestSession.OnServiceSpeechHypothesisResponse(JSON.parse(connectionMessage.TextBody));\r\n                                break;\r\n                            case \"speech.enddetected\":\r\n                                requestSession.OnServiceSpeechEndDetectedResponse(JSON.parse(connectionMessage.TextBody));\r\n                                break;\r\n                            case \"speech.phrase\":\r\n                                if (this.recognizerConfig.IsContinuousRecognition) {\r\n                                    // For continuous recognition telemetry has to be sent for every phrase as per spec.\r\n                                    this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                                }\r\n                                if (this.recognizerConfig.Format === SpeechResultFormat.Simple) {\r\n                                    requestSession.OnServiceSimpleSpeechPhraseResponse(JSON.parse(connectionMessage.TextBody));\r\n                                } else {\r\n                                    requestSession.OnServiceDetailedSpeechPhraseResponse(JSON.parse(connectionMessage.TextBody));\r\n                                }\r\n                                break;\r\n                            case \"turn.end\":\r\n                                requestSession.OnServiceTurnEndResponse();\r\n                                return PromiseHelper.FromResult(true);\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    return this.ReceiveMessage(connection, requestSession);\r\n                });\r\n        }\r\n\r\n        private SendSpeechConfig = (requestId: string, connection: IConnection, speechConfigJson: string) => {\r\n            if (speechConfigJson && this.connectionId !== this.speechConfigConnectionId) {\r\n                this.speechConfigConnectionId = this.connectionId;\r\n                return connection\r\n                    .Send(new ConnectionMessage(\r\n                        MessageType.Text,\r\n                        \"speech.config\",\r\n                        requestId,\r\n                        \"application/json\",\r\n                        speechConfigJson));\r\n            }\r\n\r\n            return PromiseHelper.FromResult(true);\r\n        }\r\n\r\n        private SendSpeechContext = (requestId: string, connection: IConnection, speechContextJson: string) => {\r\n            if (speechContextJson) {\r\n                return connection\r\n                    .Send(new ConnectionMessage(\r\n                        MessageType.Text,\r\n                        \"speech.context\",\r\n                        requestId,\r\n                        \"application/json\",\r\n                        speechContextJson));\r\n            }\r\n            return PromiseHelper.FromResult(true);\r\n        }\r\n\r\n        private SendTelemetryData = (requestId: string, connection: IConnection, telemetryData: string) => {\r\n            return connection\r\n                .Send(new ConnectionMessage(\r\n                    MessageType.Text,\r\n                    \"telemetry\",\r\n                    requestId,\r\n                    \"application/json\",\r\n                    telemetryData));\r\n        }\r\n\r\n        private SendAudio = (\r\n            requestId: string,\r\n            connection: IConnection,\r\n            audioStreamNode: Common.IAudioStreamNode,\r\n            requestSession: RequestSession): Promise<boolean> => {\r\n            return audioStreamNode\r\n                .Read()\r\n                .OnSuccessContinueWithPromise((audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n                    if (requestSession.IsSpeechEnded) {\r\n                        // If service already recognized audio end then dont send any more audio\r\n                        return PromiseHelper.FromResult(true);\r\n                    } else if (audioStreamChunk.IsEnd) {\r\n                        return connection\r\n                            .Send(new ConnectionMessage(\r\n                                MessageType.Binary,\r\n                                \"audio\",\r\n                                requestId,\r\n                                null,\r\n                                null));\r\n                    } else {\r\n                        return connection\r\n                            .Send(new ConnectionMessage(\r\n                                MessageType.Binary,\r\n                                \"audio\",\r\n                                requestId,\r\n                                null,\r\n                                audioStreamChunk.Buffer))\r\n                            .OnSuccessContinueWithPromise((_: boolean) => {\r\n                                return this.SendAudio(requestId, connection, audioStreamNode, requestSession);\r\n                            });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:max-classes-per-file\r\n    class RequestSession {\r\n        private isDisposed: boolean = false;\r\n        private serviceTelemetryListener: ServiceTelemetryListener;\r\n        private detachables: Common.IDetachable[] = new Array<Common.IDetachable>();\r\n        private requestId: string;\r\n        private audioSourceId: string;\r\n        private audioNodeId: string;\r\n        private audioNode: Common.IAudioStreamNode;\r\n        private authFetchEventId: string;\r\n        private connectionId: string;\r\n        private serviceTag: string;\r\n        private isAudioNodeDetached: boolean = false;\r\n        private isCompleted: boolean = false;\r\n        private onEventCallback: (event: SpeechRecognitionEvent) => void;\r\n\r\n        private requestCompletionDeferral: Deferred<boolean>;\r\n\r\n        constructor(audioSourceId: string, onEventCallback: (event: SpeechRecognitionEvent) => void) {\r\n            this.audioSourceId = audioSourceId;\r\n            this.onEventCallback = onEventCallback;\r\n            this.requestId = GuidGenerator.CreateGuidWithNoDash();\r\n            this.audioNodeId = GuidGenerator.CreateGuidWithNoDash();\r\n            this.requestCompletionDeferral = new Deferred<boolean>();\r\n\r\n            this.serviceTelemetryListener = new ServiceTelemetryListener(this.requestId, this.audioSourceId, this.audioNodeId);\r\n\r\n            this.OnEvent(new RecognitionTriggeredEvent(this.RequestId, this.audioSourceId, this.audioNodeId));\r\n        }\r\n\r\n        public get RequestId(): string {\r\n            return this.requestId;\r\n        }\r\n\r\n        public get AudioNodeId(): string {\r\n            return this.audioNodeId;\r\n        }\r\n\r\n        public get CompletionPromise(): Promise<boolean> {\r\n            return this.requestCompletionDeferral.Promise();\r\n        }\r\n\r\n        public get IsSpeechEnded(): boolean {\r\n            return this.isAudioNodeDetached;\r\n        }\r\n\r\n        public get IsCompleted(): boolean {\r\n            return this.isCompleted;\r\n        }\r\n\r\n        public ListenForServiceTelemetry(eventSource: Common.IEventSource<Common.PlatformEvent>): void {\r\n            this.detachables.push(eventSource.AttachListener(this.serviceTelemetryListener));\r\n        }\r\n\r\n        public OnAudioSourceAttachCompleted = (audioNode: Common.IAudioStreamNode, isError: boolean, error?: string): void => {\r\n            this.audioNode = audioNode;\r\n            if (isError) {\r\n                this.OnComplete(RecognitionCompletionStatus.AudioSourceError, error);\r\n            } else {\r\n                this.OnEvent(new ListeningStartedEvent(this.requestId, this.audioSourceId, this.audioNodeId));\r\n            }\r\n        }\r\n\r\n        public OnPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\r\n            this.authFetchEventId = authFetchEventId;\r\n            this.connectionId = connectionId;\r\n            this.OnEvent(new ConnectingToServiceEvent(this.requestId, this.authFetchEventId, this.connectionId));\r\n        }\r\n\r\n        public OnAuthCompleted = (isError: boolean, error?: string): void => {\r\n            if (isError) {\r\n                this.OnComplete(RecognitionCompletionStatus.AuthTokenFetchError, error);\r\n            }\r\n        }\r\n\r\n        public OnConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\r\n            if (statusCode === 200) {\r\n                this.OnEvent(new RecognitionStartedEvent(this.RequestId, this.audioSourceId, this.audioNodeId, this.authFetchEventId, this.connectionId));\r\n                return;\r\n            } else if (statusCode === 403) {\r\n                this.OnComplete(RecognitionCompletionStatus.UnAuthorized, reason);\r\n            } else {\r\n                this.OnComplete(RecognitionCompletionStatus.ConnectError, reason);\r\n            }\r\n        }\r\n\r\n        public OnServiceTurnStartResponse = (response: ITurnStartResponse): void => {\r\n            if (response && response.context && response.context.serviceTag) {\r\n                this.serviceTag = response.context.serviceTag;\r\n            }\r\n        }\r\n\r\n        public OnServiceSpeechStartDetectedResponse = (result: ISpeechStartDetectedResult): void => {\r\n            this.OnEvent(new SpeechStartDetectedEvent(this.RequestId, result));\r\n        }\r\n\r\n        public OnServiceSpeechHypothesisResponse = (result: ISpeechHypothesisResult): void => {\r\n            this.OnEvent(new SpeechHypothesisEvent(this.RequestId, result));\r\n        }\r\n\r\n        public OnServiceSpeechEndDetectedResponse = (result: ISpeechEndDetectedResult): void => {\r\n            this.DetachAudioNode();\r\n            this.OnEvent(new SpeechEndDetectedEvent(this.RequestId, result));\r\n        }\r\n\r\n        public OnServiceSimpleSpeechPhraseResponse = (result: ISimpleSpeechPhrase): void => {\r\n            this.OnEvent(new SpeechSimplePhraseEvent(this.RequestId, result));\r\n        }\r\n\r\n        public OnServiceDetailedSpeechPhraseResponse = (result: IDetailedSpeechPhrase): void => {\r\n            this.OnEvent(new SpeechDetailedPhraseEvent(this.RequestId, result));\r\n        }\r\n\r\n        public OnServiceTurnEndResponse = (): void => {\r\n            this.OnComplete(RecognitionCompletionStatus.Success);\r\n        }\r\n\r\n        public OnConnectionError = (error: string): void => {\r\n            this.OnComplete(RecognitionCompletionStatus.UnknownError, error);\r\n        }\r\n\r\n        public Dispose = (error?: string): void => {\r\n            if (!this.isDisposed) {\r\n                // we should have completed by now. If we did not its an unknown error.\r\n                this.OnComplete(RecognitionCompletionStatus.UnknownError, error);\r\n                this.isDisposed = true;\r\n                for (const detachable of this.detachables) {\r\n                    detachable.Detach();\r\n                }\r\n\r\n                this.serviceTelemetryListener.Dispose();\r\n            }\r\n        }\r\n\r\n        public GetTelemetry = (): string => {\r\n            return this.serviceTelemetryListener.GetTelemetry();\r\n        }\r\n\r\n        private OnComplete = (status: RecognitionCompletionStatus, error?: string): void => {\r\n            if (!this.isCompleted) {\r\n                this.isCompleted = true;\r\n                this.DetachAudioNode();\r\n                this.OnEvent(new RecognitionEndedEvent(this.RequestId, this.audioSourceId, this.audioNodeId, this.authFetchEventId, this.connectionId, this.serviceTag, status, error ? error : \"\"));\r\n            }\r\n        }\r\n\r\n        private DetachAudioNode = (): void => {\r\n            if (!this.isAudioNodeDetached) {\r\n                this.isAudioNodeDetached = true;\r\n                if (this.audioNode) {\r\n                    this.audioNode.Detach();\r\n                }\r\n            }\r\n        }\r\n\r\n        private OnEvent = (event: SpeechRecognitionEvent): void => {\r\n            this.serviceTelemetryListener.OnEvent(event);\r\n            Common.Events.Instance.OnEvent(event);\r\n            if (this.onEventCallback) {\r\n                this.onEventCallback(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    interface ITurnStartResponse {\r\n        context: ITurnStartContext;\r\n    }\r\n\r\n    interface ITurnStartContext {\r\n        serviceTag: string;\r\n    }\r\n}\r\n","/// <reference path=\"..\\..\\common\\Promise.ts\" />\r\n/// <reference path=\"..\\..\\common\\IDictionary.ts\" />\r\n/// <reference path=\"..\\..\\common\\IWebsocketMessageFormatter.ts\" />\r\n/// <reference path=\"..\\..\\common\\ConnectionMessage.ts\" />\r\n/// <reference path=\"..\\..\\common\\RawWebsocketMessage.ts\" />\r\n/// <reference path=\"..\\..\\common\\Events.ts\" />\r\n/// <reference path=\"..\\..\\common\\GuidGenerator.ts\" />\r\n\r\nnamespace Speech {\r\n\r\n    import Deferred = Common.Deferred;\r\n    import Promise = Common.Promise;\r\n    import IStringDictionary = Common.IStringDictionary;\r\n    import IWebsocketMessageFormatter = Common.IWebsocketMessageFormatter;\r\n    import RawWebsocketMessage = Common.RawWebsocketMessage;\r\n    import MessageType = Common.MessageType;\r\n\r\n    const CRLF: string = \"\\r\\n\";\r\n\r\n    export class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n        public ToConnectionMessage = (message: RawWebsocketMessage): Promise<Common.ConnectionMessage> => {\r\n            const deferral = new Deferred<Common.ConnectionMessage>();\r\n\r\n            try {\r\n                if (message.MessageType === MessageType.Text) {\r\n                    const textMessage: string = message.TextContent;\r\n                    let headers: IStringDictionary<string> = {};\r\n                    let body: string = null;\r\n\r\n                    if (textMessage) {\r\n                        const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                        if (headerBodySplit && headerBodySplit.length > 0) {\r\n                            headers = this.ParseHeaders(headerBodySplit[0]);\r\n                            if (headerBodySplit.length > 1) {\r\n                                body = headerBodySplit[1];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    deferral.Resolve(new Common.ConnectionMessage(message.MessageType, body, headers, message.Id));\r\n                } else if (message.MessageType === MessageType.Binary) {\r\n                    const binaryMessage: ArrayBuffer = message.BinaryContent;\r\n                    let headers: IStringDictionary<string> = {};\r\n                    let body: ArrayBuffer = null;\r\n\r\n                    if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                        throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                    }\r\n\r\n                    const dataView = new DataView(binaryMessage);\r\n                    const headerLength = dataView.getInt16(0);\r\n\r\n                    if (binaryMessage.byteLength < headerLength + 2) {\r\n                        throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                    }\r\n\r\n                    let headersString = \"\";\r\n                    for (let i = 0; i < headerLength; i++) {\r\n                        headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                    }\r\n\r\n                    headers = this.ParseHeaders(headersString);\r\n\r\n                    if (binaryMessage.byteLength > headerLength + 2) {\r\n                        body = binaryMessage.slice(2 + headerLength);\r\n                    }\r\n\r\n                    deferral.Resolve(new Common.ConnectionMessage(message.MessageType, body, headers, message.Id));\r\n                }\r\n            } catch (e) {\r\n                deferral.Reject(`Error formatting the message. Error: ${e}`);\r\n            }\r\n\r\n            return deferral.Promise();\r\n        }\r\n\r\n        public FromConnectionMessage = (message: Common.ConnectionMessage): Promise<RawWebsocketMessage> => {\r\n            const deferral = new Deferred<Common.RawWebsocketMessage>();\r\n\r\n            try {\r\n                if (message.MessageType === MessageType.Text) {\r\n                    const payload = `${this.MakeHeaders(message)}${CRLF}${message.TextBody ? message.TextBody : \"\"}`;\r\n\r\n                    deferral.Resolve(new RawWebsocketMessage(MessageType.Text, payload, message.Id));\r\n\r\n                } else if (message.MessageType === MessageType.Binary) {\r\n                    const headersString = this.MakeHeaders(message);\r\n                    const content = message.BinaryBody;\r\n\r\n                    const fr = new FileReader();\r\n\r\n                    fr.onload = () => {\r\n                        const headerInt8Array = new Int8Array(fr.result);\r\n\r\n                        const payload = new ArrayBuffer(2 + headerInt8Array.byteLength + (content ? content.byteLength : 0));\r\n                        const dataView = new DataView(payload);\r\n\r\n                        dataView.setInt16(0, headerInt8Array.length);\r\n\r\n                        for (let i = 0; i < headerInt8Array.byteLength; i++) {\r\n                            dataView.setInt8(2 + i, headerInt8Array[i]);\r\n                        }\r\n\r\n                        if (content) {\r\n                            const bodyInt8Array = new Int8Array(content);\r\n                            for (let i = 0; i < bodyInt8Array.byteLength; i++) {\r\n                                dataView.setInt8(2 + headerInt8Array.byteLength + i, bodyInt8Array[i]);\r\n                            }\r\n                        }\r\n\r\n                        deferral.Resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.Id));\r\n                    };\r\n\r\n                    fr.onerror = () => {\r\n                        deferral.Reject(\"failed to load headers into file reader\");\r\n                    };\r\n\r\n                    fr.readAsArrayBuffer(new Blob([headersString]));\r\n                }\r\n            } catch (e) {\r\n                deferral.Reject(`Error formatting the message. ${e}`);\r\n            }\r\n\r\n            return deferral.Promise();\r\n        }\r\n\r\n        private MakeHeaders = (message: Common.ConnectionMessage): string => {\r\n            let headersString: string = \"\";\r\n\r\n            if (message.Headers) {\r\n                for (const header in message.Headers) {\r\n                    if (header) {\r\n                        headersString += `${header}: ${message.Headers[header]}${CRLF}`;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return headersString;\r\n        }\r\n\r\n        private ParseHeaders = (headersString: string): IStringDictionary<string> => {\r\n            const headers: IStringDictionary<string> = {};\r\n\r\n            if (headersString) {\r\n                const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n                if (headers) {\r\n                    for (const header of headerMatches) {\r\n                        if (header) {\r\n                            const seperatorIndex = header.indexOf(\":\");\r\n                            const headerName = seperatorIndex > 0 ? header.substr(0, seperatorIndex).trim().toLowerCase() : header;\r\n                            const headerValue =\r\n                                seperatorIndex > 0 && header.length > (seperatorIndex + 1) ?\r\n                                    header.substr(seperatorIndex + 1).trim() :\r\n                                    \"\";\r\n\r\n                            headers[headerName] = headerValue;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return headers;\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"..\\..\\common\\Storage.ts\" />\r\n/// <reference path=\"..\\..\\common\\Events.ts\" />\r\n/// <reference path=\"..\\..\\common.browser\\LocalStorage.ts\" />\r\n/// <reference path=\"..\\..\\common.browser\\SessionStorage.ts\" />\r\n/// <reference path=\"..\\..\\common.browser\\ConsoleLoggingListener.ts\" />\r\n\r\n// Common.Storage.SetLocalStorage(new Common.Browser.LocalStorage());\r\n// Common.Storage.SetSessionStorage(new Common.Browser.SessionStorage());\r\nCommon.Events.Instance.AttachListener(new Common.Browser.ConsoleLoggingListener());\r\n","/// <reference path=\"..\\..\\common\\Promise.ts\" />\r\n/// <reference path=\"..\\..\\common\\Error.ts\" />\r\n/// <reference path=\"..\\..\\common/Storage.ts\" />\r\n/// <reference path=\"..\\..\\common\\IDictionary.ts\" />\r\n/// <reference path=\"..\\..\\common\\IConnection.ts\" />\r\n/// <reference path=\"..\\..\\common.browser\\WebsocketConnection.ts\" />\r\n/// <reference path=\"..\\speech\\IAuthentication.ts\" />\r\n/// <reference path=\"..\\speech\\WebsocketMessageFormatter.ts\" />\r\n/// <reference path=\"..\\speech\\RecognizerConfig.ts\" />\r\n/// <reference path=\"..\\speech\\IConnectionFactory.ts\" />\r\n\r\nnamespace Speech.Browser {\r\n\r\n    import IStringDictionary = Common.IStringDictionary;\r\n    import IConnection = Common.IConnection;\r\n    import WebsocketConnection = Common.Browser.WebsocketConnection;\r\n\r\n    const TestHooksParamName: string = \"testhooks\";\r\n    const ConnectionIdHeader: string = \"X-ConnectionId\";\r\n\r\n    export class SpeechConnectionFactory implements IConnectionFactory {\r\n\r\n        public Create = (\r\n            config: RecognizerConfig,\r\n            authInfo: AuthInfo,\r\n            connectionId?: string): IConnection => {\r\n\r\n            let endpoint = \"\";\r\n            switch (config.RecognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    endpoint = this.Host + this.ConversationRelativeUri;\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = this.Host + this.DictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    endpoint = this.Host + this.InteractiveRelativeUri; // default is interactive\r\n                    break;\r\n            }\r\n\r\n            const queryParams: IStringDictionary<string> = {\r\n                format: Speech.SpeechResultFormat[config.Format].toString().toLowerCase(),\r\n                language: config.Language,\r\n            };\r\n\r\n            if (this.IsDebugModeEnabled) {\r\n                queryParams[TestHooksParamName] = \"1\";\r\n            }\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            headers[authInfo.HeaderName] = authInfo.Token;\r\n            headers[ConnectionIdHeader] = connectionId;\r\n\r\n            return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\r\n        }\r\n\r\n        private get Host(): string {\r\n            return Common.Storage.Local.GetOrAdd(\"Host\", \"wss://speech.platform.bing.com\");\r\n        }\r\n\r\n        private get InteractiveRelativeUri(): string {\r\n            return Common.Storage.Local.GetOrAdd(\"InteractiveRelativeUri\", \"/speech/recognition/interactive/cognitiveservices/v1\");\r\n        }\r\n\r\n        private get ConversationRelativeUri(): string {\r\n            return Common.Storage.Local.GetOrAdd(\"ConversationRelativeUri\", \"/speech/recognition/conversation/cognitiveservices/v1\");\r\n        }\r\n\r\n        private get DictationRelativeUri(): string {\r\n            return Common.Storage.Local.GetOrAdd(\"DictationRelativeUri\", \"/speech/recognition/dictation/cognitiveservices/v1\");\r\n        }\r\n\r\n        private get IsDebugModeEnabled(): boolean {\r\n            const value = Common.Storage.Local.GetOrAdd(\"IsDebugModeEnabled\", \"false\");\r\n            return value.toLowerCase() === \"true\";\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"../../common/Promise.ts\" />\r\n/// <reference path=\"../../common/Storage.ts\" />\r\n/// <reference path=\"../../common/IAudioSource.ts\" />\r\n/// <reference path=\"../../common.browser/MicAudioSource.ts\" />\r\n/// <reference path=\"../../common.browser/PcmRecorder.ts\" />\r\n/// <reference path=\"../speech/IAuthentication.ts\" />\r\n/// <reference path=\"../speech/Recognizer.ts\" />\r\n/// <reference path=\"../speech/RecognizerConfig.ts\" />\r\n/// <reference path=\"SpeechConnectionFactory.ts\" />\r\n\r\nnamespace Speech.Browser {\r\n\r\n    export class Recognizer {\r\n\r\n        public static Create = (recognizerConfig: RecognizerConfig, authentication: IAuthentication): Speech.Recognizer => {\r\n            return Recognizer.CreateWithPcmRecorder(\r\n                recognizerConfig,\r\n                authentication);\r\n        }\r\n\r\n        public static CreateWithPcmRecorder = (recognizerConfig: RecognizerConfig, authentication: IAuthentication): Speech.Recognizer => {\r\n            return Recognizer.CreateWithCustomAudioSource(\r\n                recognizerConfig,\r\n                authentication,\r\n                new Common.Browser.MicAudioSource(new Common.Browser.PcmRecorder()));\r\n        }\r\n\r\n        public static CreateWithCustomAudioSource = (recognizerConfig: RecognizerConfig, authentication: IAuthentication, audioSource: Common.IAudioSource): Speech.Recognizer =>  {\r\n            return new Speech.Recognizer (\r\n                authentication,\r\n                new SpeechConnectionFactory(),\r\n                audioSource,\r\n                recognizerConfig);\r\n        }\r\n    }\r\n}\r\n"]}